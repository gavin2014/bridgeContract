{
  "language": "Solidity",
  "sources": {
    "contracts/Bridge.sol": {
      "content": "pragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/utils/Pausable.sol\";\nimport \"./BridgeStorage.sol\";\nimport \"./BridgeAdmin.sol\";\nimport \"./BridgeLogic.sol\";\nimport \"./ERC20Sample.sol\";\n\ncontract Bridge is BridgeAdmin, Pausable {\n\n    using SafeMath for uint256;\n\n    string public constant name = \"Bridge\";\n    address public husd;\n\n    BridgeLogic private logic;\n\n    event DepositNative(address indexed from, uint256 value, string targetAddress, string chain);\n    event DepositToken(address indexed from, uint256 value, address indexed token, string targetAddress, string chain);\n    event WithdrawingNative(address indexed to, uint256 value, string proof);\n    event WithdrawingToken(address indexed to, address indexed token, uint256 value, string proof);\n    event WithdrawDoneNative(address indexed to, uint256 value, string proof);\n    event WithdrawDoneToken(address indexed to, address indexed token, uint256 value, string proof);\n\n    modifier onlyOperator() {\n        require(itemAddressExists(OPERATORHASH, msg.sender), \"wrong operator\");\n        _;\n    }\n\n    modifier onlyPauser() {\n        require(itemAddressExists(PAUSERHASH, msg.sender), \"wrong pauser\");\n        _;\n    }\n\n\n    modifier positiveValue(uint _value) {\n        require(_value > 0, \"value need > 0\");\n        _;\n    }\n\n\n    constructor(address[] memory _owners, uint _ownerRequired,address husdAddress) {\n        initAdmin(_owners, _ownerRequired);\n        husd = husdAddress;\n    }\n\n    function depositNative(string memory _targetAddress, string memory  chain) public payable {\n        emit DepositNative(msg.sender, msg.value, _targetAddress,chain);\n    }\n\n    function depositToken(address _token, uint value, string memory _targetAddress, string memory chain) public {\n        ERC20Template erc20 = ERC20Template(_token);\n        if (_token == husd){\n            erc20.redeem(msg.sender,value);\n        }\n        else{\n            try erc20.burn(msg.sender,value){}\n            catch{\n            erc20.transferFrom(msg.sender, address(this), value);  \n            }\n        }\n        emit DepositToken(msg.sender, value, _token, _targetAddress, chain);\n    }// TODO test it.\n\n    function withdrawNative(address payable to, uint value, string memory proof, bytes32 taskHash) public\n    onlyOperator\n    whenNotPaused\n    positiveValue(value)\n    returns(bool)\n    {\n        require(address(this).balance >= value, \"contract has not enough native\");\n        require(taskHash == keccak256((abi.encodePacked(to,value,proof))),\"taskHash is wrong\");\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\n\n        if (status == logic.TASKPROCESSING()){\n            emit WithdrawingNative(to, value, proof);\n        }else if (status == logic.TASKDONE()) {\n            to.transfer(value);\n            emit WithdrawingNative(to, value, proof);\n            emit WithdrawDoneNative(to, value, proof);\n        }\n        return true;\n    }\n\n    function withdrawToken(address _token, address to, uint value, string memory proof, bytes32 taskHash) public\n    onlyOperator\n    whenNotPaused\n    positiveValue(value)\n    returns (bool)\n    {\n        ERC20Template erc20 = ERC20Template(_token);\n        require(erc20.balanceOf(address(this)) >= value, \"contract has not enough erc20\");\n        require(taskHash == keccak256((abi.encodePacked(_token,to,value,proof))),\"taskHash is wrong\");\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\n\n        if (status == logic.TASKPROCESSING()){\n            emit WithdrawingToken(to, _token, value, proof);\n        }else if (status == logic.TASKDONE()) {\n            if (_token == husd){//husd only\n                erc20.issue(to,value);\n            } \n            else{\n                try erc20.mint(to,value){}\n                catch{\n                    erc20.transfer(to, value);  \n                } \n            }\n            emit WithdrawingToken(to, _token, value, proof);\n            emit WithdrawDoneToken(to, _token, value, proof);\n        }\n        return true;\n    }\n\n\n    function modifyAdminAddress(string memory class, address oldAddress, address newAddress) public whenPaused {\n        require(newAddress != address(0x0), \"wrong address\");\n        bool flag = modifyAddress(class, oldAddress, newAddress);\n        if(flag){\n            bytes32 classHash = keccak256(abi.encodePacked(class));\n            if(classHash == LOGICHASH){\n                logic = BridgeLogic(newAddress);\n            }else if(classHash == STOREHASH){\n                logic.resetStoreLogic(newAddress);\n            }\n        }\n    }\n    function getLogicAddress() public view returns(address){\n        return address(logic);\n    }\n\n    function getStoreAddress() public view returns(address){\n        return logic.getStoreAddress();\n    }\n\n    function pause() public onlyPauser {\n        _pause();\n    }\n\n    function unpause() public onlyPauser {\n        _unpause();\n    }\n\n}\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return sub(a, b, \"SafeMath: subtraction overflow\");\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        uint256 c = a - b;\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) {\n            return 0;\n        }\n\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return div(a, b, \"SafeMath: division by zero\");\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        uint256 c = a / b;\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\n\n        return c;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return mod(a, b, \"SafeMath: modulo by zero\");\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * Reverts with custom message when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b != 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\nimport \"../GSN/Context.sol\";\n\n/**\n * @dev Contract module which allows children to implement an emergency stop\n * mechanism that can be triggered by an authorized account.\n *\n * This module is used through inheritance. It will make available the\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\n * the functions of your contract. Note that they will not be pausable by\n * simply including this module, only once the modifiers are put in place.\n */\nabstract contract Pausable is Context {\n    /**\n     * @dev Emitted when the pause is triggered by `account`.\n     */\n    event Paused(address account);\n\n    /**\n     * @dev Emitted when the pause is lifted by `account`.\n     */\n    event Unpaused(address account);\n\n    bool private _paused;\n\n    /**\n     * @dev Initializes the contract in unpaused state.\n     */\n    constructor () internal {\n        _paused = false;\n    }\n\n    /**\n     * @dev Returns true if the contract is paused, and false otherwise.\n     */\n    function paused() public view returns (bool) {\n        return _paused;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is not paused.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    modifier whenNotPaused() {\n        require(!_paused, \"Pausable: paused\");\n        _;\n    }\n\n    /**\n     * @dev Modifier to make a function callable only when the contract is paused.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    modifier whenPaused() {\n        require(_paused, \"Pausable: not paused\");\n        _;\n    }\n\n    /**\n     * @dev Triggers stopped state.\n     *\n     * Requirements:\n     *\n     * - The contract must not be paused.\n     */\n    function _pause() internal virtual whenNotPaused {\n        _paused = true;\n        emit Paused(_msgSender());\n    }\n\n    /**\n     * @dev Returns to normal state.\n     *\n     * Requirements:\n     *\n     * - The contract must be paused.\n     */\n    function _unpause() internal virtual whenPaused {\n        _paused = false;\n        emit Unpaused(_msgSender());\n    }\n}\n"
    },
    "contracts/BridgeStorage.sol": {
      "content": "pragma solidity ^0.7.0;\n\nimport \"./Container.sol\";\n\ncontract BridgeStorage is Container {\n    string public constant name = \"BridgeStorage\";\n\n    address private caller;\n\n    constructor(address aCaller) {\n        caller = aCaller;\n    }\n\n    modifier onlyCaller() {\n        require(msg.sender == caller, \"only use main contract to call\");\n        _;\n    }\n\n    function supporterExists(bytes32 taskHash, address user) public view returns(bool) {\n        return itemAddressExists(taskHash, user);\n    }\n\n    function setTaskInfo(bytes32 taskHash, uint256 taskType, uint256 status) external onlyCaller {\n        setItemInfo(taskHash, taskType, status);\n    }\n\n    function getTaskInfo(bytes32 taskHash) public view returns(uint256, uint256, uint256){\n        return getItemInfo(taskHash);\n    }\n\n    function addSupporter(bytes32 taskHash, address oneAddress) external onlyCaller{\n        addItemAddress(taskHash, oneAddress);\n    }\n\n    function removeAllSupporter(bytes32 taskHash) external onlyCaller {\n        removeItemAddresses(taskHash);\n    }\n}\n"
    },
    "contracts/BridgeAdmin.sol": {
      "content": "pragma solidity ^0.7.0;\n\nimport \"./Container.sol\";\n\ncontract BridgeAdmin is Container {\n    bytes32 internal constant OWNERHASH = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0;\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\n    bytes32 internal constant PAUSERHASH = 0x0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f;\n    bytes32 internal constant STOREHASH = 0xe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd1680;\n    bytes32 internal constant LOGICHASH = 0x397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f182;\n    uint256 internal constant MAXUSERNUM = 255;\n    bytes32[] private classHashArray;\n\n    uint256 internal ownerRequireNum;\n    uint256 internal operatorRequireNum;\n\n    event AdminChanged(string TaskType, string class, address oldAddress, address newAddress);\n    event AdminRequiredNumChanged(string TaskType, string class, uint256 previousNum, uint256 requiredNum);\n    event AdminTaskDropped(bytes32 taskHash);\n\n    modifier validRequirement(uint ownerCount, uint _required) {\n        require(ownerCount <= MaxItemAdressNum\n        && _required <= ownerCount\n        && _required > 0\n            && ownerCount > 0);\n        _;\n    }\n\n    modifier onlyOwner() {\n        require(itemAddressExists(OWNERHASH, msg.sender), \"only use owner to call\");\n        _;\n    }\n\n    function initAdmin(address[] memory _owners, uint _ownerRequired) internal validRequirement(_owners.length, _ownerRequired) {\n        for (uint i = 0; i < _owners.length; i++) {\n            addItemAddress(OWNERHASH, _owners[i]);\n        }\n        addItemAddress(PAUSERHASH,_owners[0]);// we need an init pauser\n        addItemAddress(LOGICHASH, address(0x0));\n        addItemAddress(STOREHASH, address(0x1));\n\n        classHashArray.push(OWNERHASH);\n        classHashArray.push(OPERATORHASH);\n        classHashArray.push(PAUSERHASH);\n        classHashArray.push(STOREHASH);\n        classHashArray.push(LOGICHASH);\n        ownerRequireNum = _ownerRequired;\n        operatorRequireNum = 2;\n    }\n\n    function classHashExist(bytes32 aHash) private view returns (bool) {\n        for (uint256 i = 0; i < classHashArray.length; i++)\n            if (classHashArray[i] == aHash) return true;\n        return false;\n    }\n\n    function getAdminAddresses(string memory class) public view returns (address[] memory) {\n        bytes32 classHash = getClassHash(class);\n        return getItemAddresses(classHash);\n    }\n\n    function getOwnerRequireNum() public view returns (uint256){\n        return ownerRequireNum;\n    }\n\n    function getOperatorRequireNum() public view returns (uint256){\n        return operatorRequireNum;\n    }\n\n    function resetRequiredNum(string memory class, uint256 requiredNum)\n    public onlyOwner returns (bool){\n        bytes32 classHash = getClassHash(class);\n        require((classHash == OPERATORHASH) || (classHash == OWNERHASH), \"wrong class\");\n\n        bytes32 taskHash = keccak256(abi.encodePacked(\"resetRequiredNum\", class, requiredNum));\n        addItemAddress(taskHash, msg.sender);\n\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\n            removeItem(taskHash);\n            uint256 previousNum = 0;\n            if (classHash == OWNERHASH) {\n                previousNum = ownerRequireNum;\n                ownerRequireNum = requiredNum;\n            }\n            else if (classHash == OPERATORHASH) {\n                previousNum = operatorRequireNum;\n                operatorRequireNum = requiredNum;\n            } else {\n                revert(\"wrong class\");\n            }\n            emit AdminRequiredNumChanged(\"resetRequiredNum\", class, previousNum, requiredNum);\n        }\n        return true;\n    }\n\n\n    function modifyAddress(string memory class, address oldAddress, address newAddress)\n    internal onlyOwner returns (bool){\n        bytes32 classHash = getClassHash(class);\n        bytes32 taskHash = keccak256(abi.encodePacked(\"modifyAddress\", class, oldAddress, newAddress));\n        addItemAddress(taskHash, msg.sender);\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\n            replaceItemAddress(classHash, oldAddress, newAddress);\n            emit AdminChanged(\"modifyAddress\", class, oldAddress, newAddress);\n            removeItem(taskHash);\n            return true;\n        }\n        return false;\n    }\n\n    function getClassHash(string memory class) private view returns (bytes32){\n        bytes32 classHash = keccak256(abi.encodePacked(class));\n        require(classHashExist(classHash), \"invalid class\");\n        return classHash;\n    }\n\n    function dropAddress(string memory class, address oneAddress)\n    public onlyOwner returns (bool){\n        bytes32 classHash = getClassHash(class);\n        require(classHash != STOREHASH && classHash != LOGICHASH, \"wrong class\");\n        require(itemAddressExists(classHash, oneAddress), \"no such address exist\");\n\n        if (classHash == OWNERHASH)\n            require(getItemAddressCount(classHash) > ownerRequireNum, \"insuffience addresses\");\n\n        bytes32 taskHash = keccak256(abi.encodePacked(\"dropAddress\", class, oneAddress));\n        addItemAddress(taskHash, msg.sender);\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\n            removeOneItemAddress(classHash, oneAddress);\n            emit AdminChanged(\"dropAddress\", class, oneAddress, oneAddress);\n            removeItem(taskHash);\n            return true;\n        }\n        return false;\n\n    }\n\n    function addAddress(string memory class, address oneAddress)\n    public onlyOwner returns (bool){\n        bytes32 classHash = getClassHash(class);\n        require(classHash != STOREHASH && classHash != LOGICHASH, \"wrong class\");\n\n        bytes32 taskHash = keccak256(abi.encodePacked(\"addAddress\", class, oneAddress));\n        addItemAddress(taskHash, msg.sender);\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\n            addItemAddress(classHash, oneAddress);\n            emit AdminChanged(\"addAddress\", class, oneAddress, oneAddress);\n            removeItem(taskHash);\n            return true;\n        }\n        return false;\n    }\n\n\n    function dropTask(bytes32 taskHash)\n    public onlyOwner returns (bool){\n        removeItem(taskHash);\n        emit AdminTaskDropped(taskHash);\n        return true;\n    }\n}\n"
    },
    "contracts/BridgeLogic.sol": {
      "content": "pragma solidity ^0.7.0;\n\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport \"./BridgeStorage.sol\";\n\ncontract BridgeLogic {\n    using SafeMath for uint256;\n\n    string public constant name = \"BridgeLogic\";\n\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\n    uint256 public constant TASKINIT = 0;\n    uint256 public constant TASKPROCESSING = 1;\n    uint256 public constant TASKCANCELLED = 2;\n    uint256 public constant TASKDONE = 3;\n    uint256 public constant WITHDRAWTASK = 1;\n\n    address private caller;\n    BridgeStorage private store;\n\n    constructor(address aCaller) {\n        caller = aCaller;\n    }\n\n    modifier onlyCaller(){\n        require(msg.sender == caller, \"only main contract can call\");\n        _;\n    }\n\n    modifier operatorExists(address operator) {\n        require(store.supporterExists(OPERATORHASH, operator), \"wrong operator\");\n        _;\n    }\n\n    function resetStoreLogic(address storeAddress) external onlyCaller {\n        store = BridgeStorage(storeAddress);\n    }\n\n    function getStoreAddress() public view returns(address) {\n        return address(store);\n    }\n\n\n    function supportTask(uint256 taskType, bytes32 taskHash, address oneAddress, uint256 requireNum) external onlyCaller returns(uint256){\n        require(!store.supporterExists(taskHash, oneAddress), \"supporter already exists\");\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\n        require(theTaskStatus < TASKDONE, \"wrong status\");\n\n        if (theTaskStatus != TASKINIT)\n            require(theTaskType == taskType, \"task type not match\");\n        store.addSupporter(taskHash, oneAddress);\n        theSupporterNum++;\n        if(theSupporterNum >= requireNum)\n            theTaskStatus = TASKDONE;\n        else\n            theTaskStatus = TASKPROCESSING;\n        store.setTaskInfo(taskHash, taskType, theTaskStatus);\n        return theTaskStatus;\n    }\n\n    function cancelTask(bytes32 taskHash)  external onlyCaller returns(uint256) {\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\n        require(theTaskStatus == TASKPROCESSING, \"wrong status\");\n        if(theSupporterNum > 0) store.removeAllSupporter(taskHash);\n        theTaskStatus = TASKCANCELLED;\n        store.setTaskInfo(taskHash, theTaskType, theTaskStatus);\n        return theTaskStatus;\n    }\n}\n"
    },
    "contracts/ERC20Sample.sol": {
      "content": "pragma solidity ^0.7.0;\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\nabstract contract ERC20Template is IERC20 {\n\n    function mint(address account, uint256 amount) public{\n    }\n    function burn(address account , uint256 amount) public{\n    }\n    function redeem(address account, uint256 amount)public {\n    }\n    function issue(address account, uint256 amount) public {\n    }\n}"
    },
    "@openzeppelin/contracts/GSN/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/*\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with GSN meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address payable) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes memory) {\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\n        return msg.data;\n    }\n}\n"
    },
    "contracts/Container.sol": {
      "content": "pragma solidity ^0.7.0;\n\ncontract Container {\n\n    struct Item{\n        uint256 itemType;\n        uint256 status;\n        address[] addresses;\n    }\n\n    uint256 MaxItemAdressNum = 255;\n    mapping (bytes32 => Item) private container;\n    // bool private _nativePaused = false;\n\n\n    function itemAddressExists(bytes32 _id, address _oneAddress) internal view returns(bool){\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\n            if(container[_id].addresses[i] == _oneAddress)\n                return true;\n        }\n        return false;\n    }\n    function getItemAddresses(bytes32 _id) internal view returns(address[] memory){\n        return container[_id].addresses;\n    }\n\n    function getItemInfo(bytes32 _id) internal view returns(uint256, uint256, uint256){\n        return (container[_id].itemType, container[_id].status, container[_id].addresses.length);\n    }\n\n    function getItemAddressCount(bytes32 _id) internal view returns(uint256){\n        return container[_id].addresses.length;\n    }\n\n    function setItemInfo(bytes32 _id, uint256 _itemType, uint256 _status) internal{\n        container[_id].itemType = _itemType;\n        container[_id].status = _status;\n    }\n\n    function addItemAddress(bytes32 _id, address _oneAddress) internal{\n        require(!itemAddressExists(_id, _oneAddress), \"dup address added\");\n        require(container[_id].addresses.length < MaxItemAdressNum, \"too many addresses\");\n        container[_id].addresses.push(_oneAddress);\n    }\n    function removeItemAddresses(bytes32 _id) internal {\n        delete container[_id].addresses;\n    }\n\n    function removeOneItemAddress(bytes32 _id, address _oneAddress) internal {\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\n            if(container[_id].addresses[i] == _oneAddress){\n                container[_id].addresses[i] = container[_id].addresses[container[_id].addresses.length - 1];\n                container[_id].addresses.pop();\n                return;\n            }\n        }\n    }\n\n    function removeItem(bytes32 _id) internal{\n        delete container[_id];\n    }\n\n    function replaceItemAddress(bytes32 _id, address _oneAddress, address _anotherAddress) internal {\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\n            if(container[_id].addresses[i] == _oneAddress){\n                container[_id].addresses[i] = _anotherAddress;\n                return;\n            }\n        }\n    }\n}"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}\n"
    }
  },
  "settings": {
    "evmVersion": "istanbul",
    "optimizer": {
      "enabled": false,
      "runs": 0
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}