{
  "address": "0x88C83c4362D4fFE594B7Eb6c9a4Be791947a84D7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_owners",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "_ownerRequired",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "husdAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "TaskType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "class",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "TaskType",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "class",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "previousNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "requiredNum",
          "type": "uint256"
        }
      ],
      "name": "AdminRequiredNumChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        }
      ],
      "name": "AdminTaskDropped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "targetAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "chain",
          "type": "string"
        }
      ],
      "name": "DepositNative",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "targetAddress",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "chain",
          "type": "string"
        }
      ],
      "name": "DepositToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proof",
          "type": "string"
        }
      ],
      "name": "WithdrawDoneNative",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proof",
          "type": "string"
        }
      ],
      "name": "WithdrawDoneToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proof",
          "type": "string"
        }
      ],
      "name": "WithdrawingNative",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "proof",
          "type": "string"
        }
      ],
      "name": "WithdrawingToken",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "class",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "oneAddress",
          "type": "address"
        }
      ],
      "name": "addAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_targetAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "chain",
          "type": "string"
        }
      ],
      "name": "depositNative",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "_targetAddress",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "chain",
          "type": "string"
        }
      ],
      "name": "depositToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "class",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "oneAddress",
          "type": "address"
        }
      ],
      "name": "dropAddress",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        }
      ],
      "name": "dropTask",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "class",
          "type": "string"
        }
      ],
      "name": "getAdminAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLogicAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOperatorRequireNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwnerRequireNum",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStoreAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "husd",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "class",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "oldAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "modifyAdminAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "class",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "requiredNum",
          "type": "uint256"
        }
      ],
      "name": "resetRequiredNum",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proof",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        }
      ],
      "name": "withdrawNative",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "proof",
          "type": "string"
        },
        {
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        }
      ],
      "name": "withdrawToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbf8bbbaff86a9f47c194d29a086df6b5a01e12548f05291af65fbcbe9efb530d",
  "receipt": {
    "to": null,
    "from": "0xB26cdfEC309d01C2Cc526B14D4C2A0Ecab402702",
    "contractAddress": "0x88C83c4362D4fFE594B7Eb6c9a4Be791947a84D7",
    "transactionIndex": 0,
    "gasUsed": "4365181",
    "logsBloom": "0x
    "blockHash": "0x54da0a3757aa0569458465665b4f2a72456554525113075e14f73ba1eb6bf4b5",
    "transactionHash": "0xbf8bbbaff86a9f47c194d29a086df6b5a01e12548f05291af65fbcbe9efb530d",
    "logs": [],
    "blockNumber": 1295689,
    "cumulativeGasUsed": "4365181",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xB26cdfEC309d01C2Cc526B14D4C2A0Ecab402702",
      "0xd848afD74aa19500dA3110151fc6053063e09695",
      "0x127Cb8552a10949016eABDdbee5850FCa3c79b70"
    ],
    1,
    "0x745274f9d051997D3BA53977451A3358bf0e9710"
  ],
  "solcInputHash": "bec3ad41db7634d83681da526d0ed6cb",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_owners\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"_ownerRequired\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"husdAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TaskType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"TaskType\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"previousNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"requiredNum\",\"type\":\"uint256\"}],\"name\":\"AdminRequiredNumChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"AdminTaskDropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"DepositNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"targetAddress\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"DepositToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawDoneNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawDoneToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawingNative\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"}],\"name\":\"WithdrawingToken\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"}],\"name\":\"addAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_targetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"depositNative\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"_targetAddress\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"chain\",\"type\":\"string\"}],\"name\":\"depositToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"}],\"name\":\"dropAddress\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"dropTask\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"}],\"name\":\"getAdminAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLogicAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOperatorRequireNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwnerRequireNum\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"husd\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"oldAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"modifyAdminAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"class\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"requiredNum\",\"type\":\"uint256\"}],\"name\":\"resetRequiredNum\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawNative\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"proof\",\"type\":\"string\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"withdrawToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Bridge.sol\":\"Bridge\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/GSN/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../GSN/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor () internal {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x065360ef3924db6b63c2160886b5de737497dd64a917e362dd8d857cda1f5ae2\",\"license\":\"MIT\"},\"contracts/Bridge.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\nimport \\\"./BridgeStorage.sol\\\";\\nimport \\\"./BridgeAdmin.sol\\\";\\nimport \\\"./BridgeLogic.sol\\\";\\nimport \\\"./ERC20Sample.sol\\\";\\n\\ncontract Bridge is BridgeAdmin, Pausable {\\n\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"Bridge\\\";\\n    address public husd;\\n\\n    BridgeLogic private logic;\\n\\n    event DepositNative(address indexed from, uint256 value, string targetAddress, string chain);\\n    event DepositToken(address indexed from, uint256 value, address indexed token, string targetAddress, string chain);\\n    event WithdrawingNative(address indexed to, uint256 value, string proof);\\n    event WithdrawingToken(address indexed to, address indexed token, uint256 value, string proof);\\n    event WithdrawDoneNative(address indexed to, uint256 value, string proof);\\n    event WithdrawDoneToken(address indexed to, address indexed token, uint256 value, string proof);\\n\\n    modifier onlyOperator() {\\n        require(itemAddressExists(OPERATORHASH, msg.sender), \\\"wrong operator\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauser() {\\n        require(itemAddressExists(PAUSERHASH, msg.sender), \\\"wrong pauser\\\");\\n        _;\\n    }\\n\\n\\n    modifier positiveValue(uint _value) {\\n        require(_value > 0, \\\"value need > 0\\\");\\n        _;\\n    }\\n\\n\\n    constructor(address[] memory _owners, uint _ownerRequired,address husdAddress) {\\n        initAdmin(_owners, _ownerRequired);\\n        husd = husdAddress;\\n    }\\n\\n    function depositNative(string memory _targetAddress, string memory  chain) public payable {\\n        emit DepositNative(msg.sender, msg.value, _targetAddress,chain);\\n    }\\n\\n    function depositToken(address _token, uint value, string memory _targetAddress, string memory chain) public {\\n        ERC20Template erc20 = ERC20Template(_token);\\n        if (_token == husd){\\n            erc20.redeem(msg.sender,value);\\n        }\\n        else{\\n            try erc20.burn(msg.sender,value){}\\n            catch{\\n            erc20.transferFrom(msg.sender, address(this), value);  \\n            }\\n        }\\n        emit DepositToken(msg.sender, value, _token, _targetAddress, chain);\\n    }// TODO test it.\\n\\n    function withdrawNative(address payable to, uint value, string memory proof, bytes32 taskHash) public\\n    onlyOperator\\n    whenNotPaused\\n    positiveValue(value)\\n    returns(bool)\\n    {\\n        require(address(this).balance >= value, \\\"contract has not enough native\\\");\\n        require(taskHash == keccak256((abi.encodePacked(to,value,proof))),\\\"taskHash is wrong\\\");\\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\\n\\n        if (status == logic.TASKPROCESSING()){\\n            emit WithdrawingNative(to, value, proof);\\n        }else if (status == logic.TASKDONE()) {\\n            to.transfer(value);\\n            emit WithdrawingNative(to, value, proof);\\n            emit WithdrawDoneNative(to, value, proof);\\n        }\\n        return true;\\n    }\\n\\n    function withdrawToken(address _token, address to, uint value, string memory proof, bytes32 taskHash) public\\n    onlyOperator\\n    whenNotPaused\\n    positiveValue(value)\\n    returns (bool)\\n    {\\n        ERC20Template erc20 = ERC20Template(_token);\\n        require(erc20.balanceOf(address(this)) >= value, \\\"contract has not enough erc20\\\");\\n        require(taskHash == keccak256((abi.encodePacked(_token,to,value,proof))),\\\"taskHash is wrong\\\");\\n        uint256 status = logic.supportTask(logic.WITHDRAWTASK(), taskHash, msg.sender, operatorRequireNum);\\n\\n        if (status == logic.TASKPROCESSING()){\\n            emit WithdrawingToken(to, _token, value, proof);\\n        }else if (status == logic.TASKDONE()) {\\n            if (_token == husd){//husd only\\n                erc20.issue(to,value);\\n            } \\n            else{\\n                try erc20.mint(to,value){}\\n                catch{\\n                    erc20.transfer(to, value);  \\n                } \\n            }\\n            emit WithdrawingToken(to, _token, value, proof);\\n            emit WithdrawDoneToken(to, _token, value, proof);\\n        }\\n        return true;\\n    }\\n\\n\\n    function modifyAdminAddress(string memory class, address oldAddress, address newAddress) public whenPaused {\\n        require(newAddress != address(0x0), \\\"wrong address\\\");\\n        bool flag = modifyAddress(class, oldAddress, newAddress);\\n        if(flag){\\n            bytes32 classHash = keccak256(abi.encodePacked(class));\\n            if(classHash == LOGICHASH){\\n                logic = BridgeLogic(newAddress);\\n            }else if(classHash == STOREHASH){\\n                logic.resetStoreLogic(newAddress);\\n            }\\n        }\\n    }\\n    function getLogicAddress() public view returns(address){\\n        return address(logic);\\n    }\\n\\n    function getStoreAddress() public view returns(address){\\n        return logic.getStoreAddress();\\n    }\\n\\n    function pause() public onlyPauser {\\n        _pause();\\n    }\\n\\n    function unpause() public onlyPauser {\\n        _unpause();\\n    }\\n\\n}\\n\",\"keccak256\":\"0x10d7e43147db3718036e45d99f4b2a8ea02959bbee8d6aaa50a04363aa618d87\"},\"contracts/BridgeAdmin.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"./Container.sol\\\";\\n\\ncontract BridgeAdmin is Container {\\n    bytes32 internal constant OWNERHASH = 0x02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c0;\\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\\n    bytes32 internal constant PAUSERHASH = 0x0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f;\\n    bytes32 internal constant STOREHASH = 0xe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd1680;\\n    bytes32 internal constant LOGICHASH = 0x397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f182;\\n    uint256 internal constant MAXUSERNUM = 255;\\n    bytes32[] private classHashArray;\\n\\n    uint256 internal ownerRequireNum;\\n    uint256 internal operatorRequireNum;\\n\\n    event AdminChanged(string TaskType, string class, address oldAddress, address newAddress);\\n    event AdminRequiredNumChanged(string TaskType, string class, uint256 previousNum, uint256 requiredNum);\\n    event AdminTaskDropped(bytes32 taskHash);\\n\\n    modifier validRequirement(uint ownerCount, uint _required) {\\n        require(ownerCount <= MaxItemAdressNum\\n        && _required <= ownerCount\\n        && _required > 0\\n            && ownerCount > 0);\\n        _;\\n    }\\n\\n    modifier onlyOwner() {\\n        require(itemAddressExists(OWNERHASH, msg.sender), \\\"only use owner to call\\\");\\n        _;\\n    }\\n\\n    function initAdmin(address[] memory _owners, uint _ownerRequired) internal validRequirement(_owners.length, _ownerRequired) {\\n        for (uint i = 0; i < _owners.length; i++) {\\n            addItemAddress(OWNERHASH, _owners[i]);\\n        }\\n        addItemAddress(PAUSERHASH,_owners[0]);// we need an init pauser\\n        addItemAddress(LOGICHASH, address(0x0));\\n        addItemAddress(STOREHASH, address(0x1));\\n\\n        classHashArray.push(OWNERHASH);\\n        classHashArray.push(OPERATORHASH);\\n        classHashArray.push(PAUSERHASH);\\n        classHashArray.push(STOREHASH);\\n        classHashArray.push(LOGICHASH);\\n        ownerRequireNum = _ownerRequired;\\n        operatorRequireNum = 2;\\n    }\\n\\n    function classHashExist(bytes32 aHash) private view returns (bool) {\\n        for (uint256 i = 0; i < classHashArray.length; i++)\\n            if (classHashArray[i] == aHash) return true;\\n        return false;\\n    }\\n\\n    function getAdminAddresses(string memory class) public view returns (address[] memory) {\\n        bytes32 classHash = getClassHash(class);\\n        return getItemAddresses(classHash);\\n    }\\n\\n    function getOwnerRequireNum() public view returns (uint256){\\n        return ownerRequireNum;\\n    }\\n\\n    function getOperatorRequireNum() public view returns (uint256){\\n        return operatorRequireNum;\\n    }\\n\\n    function resetRequiredNum(string memory class, uint256 requiredNum)\\n    public onlyOwner returns (bool){\\n        bytes32 classHash = getClassHash(class);\\n        require((classHash == OPERATORHASH) || (classHash == OWNERHASH), \\\"wrong class\\\");\\n\\n        bytes32 taskHash = keccak256(abi.encodePacked(\\\"resetRequiredNum\\\", class, requiredNum));\\n        addItemAddress(taskHash, msg.sender);\\n\\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\\n            removeItem(taskHash);\\n            uint256 previousNum = 0;\\n            if (classHash == OWNERHASH) {\\n                previousNum = ownerRequireNum;\\n                ownerRequireNum = requiredNum;\\n            }\\n            else if (classHash == OPERATORHASH) {\\n                previousNum = operatorRequireNum;\\n                operatorRequireNum = requiredNum;\\n            } else {\\n                revert(\\\"wrong class\\\");\\n            }\\n            emit AdminRequiredNumChanged(\\\"resetRequiredNum\\\", class, previousNum, requiredNum);\\n        }\\n        return true;\\n    }\\n\\n\\n    function modifyAddress(string memory class, address oldAddress, address newAddress)\\n    internal onlyOwner returns (bool){\\n        bytes32 classHash = getClassHash(class);\\n        bytes32 taskHash = keccak256(abi.encodePacked(\\\"modifyAddress\\\", class, oldAddress, newAddress));\\n        addItemAddress(taskHash, msg.sender);\\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\\n            replaceItemAddress(classHash, oldAddress, newAddress);\\n            emit AdminChanged(\\\"modifyAddress\\\", class, oldAddress, newAddress);\\n            removeItem(taskHash);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n    function getClassHash(string memory class) private view returns (bytes32){\\n        bytes32 classHash = keccak256(abi.encodePacked(class));\\n        require(classHashExist(classHash), \\\"invalid class\\\");\\n        return classHash;\\n    }\\n\\n    function dropAddress(string memory class, address oneAddress)\\n    public onlyOwner returns (bool){\\n        bytes32 classHash = getClassHash(class);\\n        require(classHash != STOREHASH && classHash != LOGICHASH, \\\"wrong class\\\");\\n        require(itemAddressExists(classHash, oneAddress), \\\"no such address exist\\\");\\n\\n        if (classHash == OWNERHASH)\\n            require(getItemAddressCount(classHash) > ownerRequireNum, \\\"insuffience addresses\\\");\\n\\n        bytes32 taskHash = keccak256(abi.encodePacked(\\\"dropAddress\\\", class, oneAddress));\\n        addItemAddress(taskHash, msg.sender);\\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\\n            removeOneItemAddress(classHash, oneAddress);\\n            emit AdminChanged(\\\"dropAddress\\\", class, oneAddress, oneAddress);\\n            removeItem(taskHash);\\n            return true;\\n        }\\n        return false;\\n\\n    }\\n\\n    function addAddress(string memory class, address oneAddress)\\n    public onlyOwner returns (bool){\\n        bytes32 classHash = getClassHash(class);\\n        require(classHash != STOREHASH && classHash != LOGICHASH, \\\"wrong class\\\");\\n\\n        bytes32 taskHash = keccak256(abi.encodePacked(\\\"addAddress\\\", class, oneAddress));\\n        addItemAddress(taskHash, msg.sender);\\n        if (getItemAddressCount(taskHash) >= ownerRequireNum) {\\n            addItemAddress(classHash, oneAddress);\\n            emit AdminChanged(\\\"addAddress\\\", class, oneAddress, oneAddress);\\n            removeItem(taskHash);\\n            return true;\\n        }\\n        return false;\\n    }\\n\\n\\n    function dropTask(bytes32 taskHash)\\n    public onlyOwner returns (bool){\\n        removeItem(taskHash);\\n        emit AdminTaskDropped(taskHash);\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0xf606ae2b9e69ce16f31ac7294615b13fd29bd077ae833bc515b4bc06ad2012d7\"},\"contracts/BridgeLogic.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BridgeStorage.sol\\\";\\n\\ncontract BridgeLogic {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"BridgeLogic\\\";\\n\\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\\n    uint256 public constant TASKINIT = 0;\\n    uint256 public constant TASKPROCESSING = 1;\\n    uint256 public constant TASKCANCELLED = 2;\\n    uint256 public constant TASKDONE = 3;\\n    uint256 public constant WITHDRAWTASK = 1;\\n\\n    address private caller;\\n    BridgeStorage private store;\\n\\n    constructor(address aCaller) {\\n        caller = aCaller;\\n    }\\n\\n    modifier onlyCaller(){\\n        require(msg.sender == caller, \\\"only main contract can call\\\");\\n        _;\\n    }\\n\\n    modifier operatorExists(address operator) {\\n        require(store.supporterExists(OPERATORHASH, operator), \\\"wrong operator\\\");\\n        _;\\n    }\\n\\n    function resetStoreLogic(address storeAddress) external onlyCaller {\\n        store = BridgeStorage(storeAddress);\\n    }\\n\\n    function getStoreAddress() public view returns(address) {\\n        return address(store);\\n    }\\n\\n\\n    function supportTask(uint256 taskType, bytes32 taskHash, address oneAddress, uint256 requireNum) external onlyCaller returns(uint256){\\n        require(!store.supporterExists(taskHash, oneAddress), \\\"supporter already exists\\\");\\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\\n        require(theTaskStatus < TASKDONE, \\\"wrong status\\\");\\n\\n        if (theTaskStatus != TASKINIT)\\n            require(theTaskType == taskType, \\\"task type not match\\\");\\n        store.addSupporter(taskHash, oneAddress);\\n        theSupporterNum++;\\n        if(theSupporterNum >= requireNum)\\n            theTaskStatus = TASKDONE;\\n        else\\n            theTaskStatus = TASKPROCESSING;\\n        store.setTaskInfo(taskHash, taskType, theTaskStatus);\\n        return theTaskStatus;\\n    }\\n\\n    function cancelTask(bytes32 taskHash)  external onlyCaller returns(uint256) {\\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\\n        require(theTaskStatus == TASKPROCESSING, \\\"wrong status\\\");\\n        if(theSupporterNum > 0) store.removeAllSupporter(taskHash);\\n        theTaskStatus = TASKCANCELLED;\\n        store.setTaskInfo(taskHash, theTaskType, theTaskStatus);\\n        return theTaskStatus;\\n    }\\n}\\n\",\"keccak256\":\"0x4791b106822348836b2bbb56e50b8c4fc0e78556b78ce2c9c820839be3dd4169\"},\"contracts/BridgeStorage.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"./Container.sol\\\";\\n\\ncontract BridgeStorage is Container {\\n    string public constant name = \\\"BridgeStorage\\\";\\n\\n    address private caller;\\n\\n    constructor(address aCaller) {\\n        caller = aCaller;\\n    }\\n\\n    modifier onlyCaller() {\\n        require(msg.sender == caller, \\\"only use main contract to call\\\");\\n        _;\\n    }\\n\\n    function supporterExists(bytes32 taskHash, address user) public view returns(bool) {\\n        return itemAddressExists(taskHash, user);\\n    }\\n\\n    function setTaskInfo(bytes32 taskHash, uint256 taskType, uint256 status) external onlyCaller {\\n        setItemInfo(taskHash, taskType, status);\\n    }\\n\\n    function getTaskInfo(bytes32 taskHash) public view returns(uint256, uint256, uint256){\\n        return getItemInfo(taskHash);\\n    }\\n\\n    function addSupporter(bytes32 taskHash, address oneAddress) external onlyCaller{\\n        addItemAddress(taskHash, oneAddress);\\n    }\\n\\n    function removeAllSupporter(bytes32 taskHash) external onlyCaller {\\n        removeItemAddresses(taskHash);\\n    }\\n}\\n\",\"keccak256\":\"0xbe38dde4ad977bd0f521beb658f93ebcd225d924450f5c9f0e6a63b232fb4d87\"},\"contracts/Container.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\ncontract Container {\\n\\n    struct Item{\\n        uint256 itemType;\\n        uint256 status;\\n        address[] addresses;\\n    }\\n\\n    uint256 MaxItemAdressNum = 255;\\n    mapping (bytes32 => Item) private container;\\n    // bool private _nativePaused = false;\\n\\n\\n    function itemAddressExists(bytes32 _id, address _oneAddress) internal view returns(bool){\\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\\n            if(container[_id].addresses[i] == _oneAddress)\\n                return true;\\n        }\\n        return false;\\n    }\\n    function getItemAddresses(bytes32 _id) internal view returns(address[] memory){\\n        return container[_id].addresses;\\n    }\\n\\n    function getItemInfo(bytes32 _id) internal view returns(uint256, uint256, uint256){\\n        return (container[_id].itemType, container[_id].status, container[_id].addresses.length);\\n    }\\n\\n    function getItemAddressCount(bytes32 _id) internal view returns(uint256){\\n        return container[_id].addresses.length;\\n    }\\n\\n    function setItemInfo(bytes32 _id, uint256 _itemType, uint256 _status) internal{\\n        container[_id].itemType = _itemType;\\n        container[_id].status = _status;\\n    }\\n\\n    function addItemAddress(bytes32 _id, address _oneAddress) internal{\\n        require(!itemAddressExists(_id, _oneAddress), \\\"dup address added\\\");\\n        require(container[_id].addresses.length < MaxItemAdressNum, \\\"too many addresses\\\");\\n        container[_id].addresses.push(_oneAddress);\\n    }\\n    function removeItemAddresses(bytes32 _id) internal {\\n        delete container[_id].addresses;\\n    }\\n\\n    function removeOneItemAddress(bytes32 _id, address _oneAddress) internal {\\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\\n            if(container[_id].addresses[i] == _oneAddress){\\n                container[_id].addresses[i] = container[_id].addresses[container[_id].addresses.length - 1];\\n                container[_id].addresses.pop();\\n                return;\\n            }\\n        }\\n    }\\n\\n    function removeItem(bytes32 _id) internal{\\n        delete container[_id];\\n    }\\n\\n    function replaceItemAddress(bytes32 _id, address _oneAddress, address _anotherAddress) internal {\\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\\n            if(container[_id].addresses[i] == _oneAddress){\\n                container[_id].addresses[i] = _anotherAddress;\\n                return;\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x80a0be619d8ec377df6b7ced88b0537c767acf3acc8bde0538ec77703d22299e\"},\"contracts/ERC20Sample.sol\":{\"content\":\"pragma solidity ^0.7.0;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\nabstract contract ERC20Template is IERC20 {\\n\\n    function mint(address account, uint256 amount) public{\\n    }\\n    function burn(address account , uint256 amount) public{\\n    }\\n    function redeem(address account, uint256 amount)public {\\n    }\\n    function issue(address account, uint256 amount) public {\\n    }\\n}\",\"keccak256\":\"0x5d8613ea6629c563179d676a985a78b365e186e07ecf7a0b224c643b011631e9\"}},\"version\":1}",
  "bytecode": "0x608060405260ff6000553480156200001657600080fd5b5060405162004cca38038062004cca833981810160405260608110156200003c57600080fd5b81019080805160405193929190846401000000008211156200005d57600080fd5b838201915060208201858111156200007457600080fd5b82518660208202830111640100000000821117156200009257600080fd5b8083526020830192505050908051906020019060200280838360005b83811015620000cb578082015181840152602081019050620000ae565b5050505090500160405260200180519060200190929190805190602001909291905050506000600560006101000a81548160ff0219169083151502179055506200011c83836200016660201b60201c565b80600560016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550505050620006ae565b81518160005482111580156200017c5750818111155b8015620001895750600081115b8015620001965750600082115b620001a057600080fd5b60005b84518110156200020457620001f67f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b868381518110620001e257fe5b60200260200101516200044c60201b60201c565b8080600101915050620001a3565b506200024f7f0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f60001b856000815181106200023b57fe5b60200260200101516200044c60201b60201c565b620002857f397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f18260001b60006200044c60201b60201c565b620002bb7fe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd168060001b60016200044c60201b60201c565b60027f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b908060018154018082558091505060019003906000526020600020016000909190919091505560027f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62260001b908060018154018082558091505060019003906000526020600020016000909190919091505560027f0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f60001b908060018154018082558091505060019003906000526020600020016000909190919091505560027fe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd168060001b908060018154018082558091505060019003906000526020600020016000909190919091505560027f397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f18260001b908060018154018082558091505060019003906000526020600020016000909190919091505582600381905550600260048190555050505050565b6200045e8282620005de60201b60201c565b15620004d2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f647570206164647265737320616464656400000000000000000000000000000081525060200191505060405180910390fd5b60005460016000848152602001908152602001600020600201805490501062000563576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f746f6f206d616e7920616464726573736573000000000000000000000000000081525060200191505060405180910390fd5b60016000838152602001908152602001600020600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b600080600090505b6001600085815260200190815260200160002060020180549050811015620006a2578273ffffffffffffffffffffffffffffffffffffffff166001600086815260200190815260200160002060020182815481106200064157fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141562000694576001915050620006a8565b8080600101915050620005e6565b50600090505b92915050565b61460c80620006be6000396000f3fe6080604052600436106100e45760003560e01c806302c1927c146100e957806306fdde031461021b5780631d75807c146102ab5780632c2df742146102d65780633f4ba83a146103de578063521cb590146103f55780635c975abb14610446578063686699bb146104735780638456cb59146104b45780638609d28c146104cb57806391c40bf71461061d578063abd108ba1461071b578063b07ed3a91461075c578063c8e369bf1461079d578063ceb35b0f146108ba578063d5b99d3c146109b8578063dd9b86c114610aca578063e6a81ec414610c53578063e9e211bd14610c7e575b600080fd5b3480156100f557600080fd5b50610203600480360360a081101561010c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561017357600080fd5b82018360208201111561018557600080fd5b803590602001918460018302840111640100000000831117156101a757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610d66565b60405180821515815260200191505060405180910390f35b34801561022757600080fd5b506102306118d2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610270578082015181840152602081019050610255565b50505050905090810190601f16801561029d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b757600080fd5b506102c061190b565b6040518082815260200191505060405180910390f35b3480156102e257600080fd5b506103dc600480360360608110156102f957600080fd5b810190808035906020019064010000000081111561031657600080fd5b82018360208201111561032857600080fd5b8035906020019184600183028401116401000000008311171561034a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611915565b005b3480156103ea57600080fd5b506103f3611c0e565b005b34801561040157600080fd5b5061042e6004803603602081101561041857600080fd5b8101908080359060200190929190505050611cb7565b60405180821515815260200191505060405180910390f35b34801561045257600080fd5b5061045b611da1565b60405180821515815260200191505060405180910390f35b34801561047f57600080fd5b50610488611db8565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104c057600080fd5b506104c9611dde565b005b61061b600480360360408110156104e157600080fd5b81019080803590602001906401000000008111156104fe57600080fd5b82018360208201111561051057600080fd5b8035906020019184600183028401116401000000008311171561053257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561059557600080fd5b8201836020820111156105a757600080fd5b803590602001918460018302840111640100000000831117156105c957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611e87565b005b34801561062957600080fd5b506107036004803603604081101561064057600080fd5b810190808035906020019064010000000081111561065d57600080fd5b82018360208201111561066f57600080fd5b8035906020019184600183028401116401000000008311171561069157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fb3565b60405180821515815260200191505060405180910390f35b34801561072757600080fd5b50610730612466565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076857600080fd5b50610771612490565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107a957600080fd5b50610863600480360360208110156107c057600080fd5b81019080803590602001906401000000008111156107dd57600080fd5b8201836020820111156107ef57600080fd5b8035906020019184600183028401116401000000008311171561081157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061253a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108a657808201518184015260208101905061088b565b505050509050019250505060405180910390f35b3480156108c657600080fd5b506109a0600480360360408110156108dd57600080fd5b81019080803590602001906401000000008111156108fa57600080fd5b82018360208201111561090c57600080fd5b8035906020019184600183028401116401000000008311171561092e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061255a565b60405180821515815260200191505060405180910390f35b3480156109c457600080fd5b50610ab2600480360360808110156109db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610a2257600080fd5b820183602082011115610a3457600080fd5b80359060200191846001830284011164010000000083111715610a5657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506128e6565b60405180821515815260200191505060405180910390f35b348015610ad657600080fd5b50610c5160048036036080811015610aed57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610b3457600080fd5b820183602082011115610b4657600080fd5b80359060200191846001830284011164010000000083111715610b6857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610bcb57600080fd5b820183602082011115610bdd57600080fd5b80359060200191846001830284011164010000000083111715610bff57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061316d565b005b348015610c5f57600080fd5b50610c686134f4565b6040518082815260200191505060405180910390f35b348015610c8a57600080fd5b50610d4e60048036036040811015610ca157600080fd5b8101908080359060200190640100000000811115610cbe57600080fd5b820183602082011115610cd057600080fd5b80359060200191846001830284011164010000000083111715610cf257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506134fe565b60405180821515815260200191505060405180910390f35b6000610d957f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62260001b33613917565b610e07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f77726f6e67206f70657261746f7200000000000000000000000000000000000081525060200191505060405180910390fd5b600560009054906101000a900460ff1615610e8a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b8360008111610f01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f76616c7565206e656564203e203000000000000000000000000000000000000081525060200191505060405180910390fd5b6000879050858173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610f6e57600080fd5b505afa158015610f82573d6000803e3d6000fd5b505050506040513d6020811015610f9857600080fd5b8101908080519060200190929190505050101561101d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f636f6e747261637420686173206e6f7420656e6f75676820657263323000000081525060200191505060405180910390fd5b87878787604051602001808573ffffffffffffffffffffffffffffffffffffffff1660601b81526014018473ffffffffffffffffffffffffffffffffffffffff1660601b815260140183815260200182805190602001908083835b6020831061109b5780518252602082019150602081019050602083039250611078565b6001836020036101000a03801982511681845116808217855250505050505090500194505050505060405160208183030381529060405280519060200120841461114d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f7461736b486173682069732077726f6e6700000000000000000000000000000081525060200191505060405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae0fd47f600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663478538026040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f557600080fd5b505afa158015611209573d6000803e3d6000fd5b505050506040513d602081101561121f57600080fd5b810190808051906020019092919050505087336004546040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050602060405180830381600087803b15801561129657600080fd5b505af11580156112aa573d6000803e3d6000fd5b505050506040513d60208110156112c057600080fd5b81019080805190602001909291905050509050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663afd464f26040518163ffffffff1660e01b815260040160206040518083038186803b15801561133b57600080fd5b505afa15801561134f573d6000803e3d6000fd5b505050506040513d602081101561136557600080fd5b8101908080519060200190929190505050811415611454578873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f91b4005f248ece53c5402f0c547c6a472d18676fbb0e2e15029d4869140cbe2089896040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114145780820151818401526020810190506113f9565b50505050905090810190601f1680156114415780820380516001836020036101000a031916815260200191505b50935050505060405180910390a36118c2565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310224a986040518163ffffffff1660e01b815260040160206040518083038186803b1580156114bc57600080fd5b505afa1580156114d0573d6000803e3d6000fd5b505050506040513d60208110156114e657600080fd5b81019080805190602001909291905050508114156118c157600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614156115e2578173ffffffffffffffffffffffffffffffffffffffff1663867904b489896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156115c557600080fd5b505af11580156115d9573d6000803e3d6000fd5b5050505061171c565b8173ffffffffffffffffffffffffffffffffffffffff166340c10f1989896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561165357600080fd5b505af1925050508015611664575060015b61171a578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156116d957600080fd5b505af11580156116ed573d6000803e3d6000fd5b505050506040513d602081101561170357600080fd5b81019080805190602001909291905050505061171b565b5b5b8873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f91b4005f248ece53c5402f0c547c6a472d18676fbb0e2e15029d4869140cbe2089896040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117b3578082015181840152602081019050611798565b50505050905090810190601f1680156117e05780820380516001836020036101000a031916815260200191505b50935050505060405180910390a38873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f044513e921a12ac6560730ac3063f7946fdcb715deb39bc6f84c38be8083648a89896040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561188557808201518184015260208101905061186a565b50505050905090810190601f1680156118b25780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35b5b6001935050505095945050505050565b6040518060400160405280600681526020017f427269646765000000000000000000000000000000000000000000000000000081525081565b6000600454905090565b600560009054906101000a900460ff16611997576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f77726f6e6720616464726573730000000000000000000000000000000000000081525060200191505060405180910390fd5b6000611a478484846139e2565b90508015611c08576000846040516020018082805190602001908083835b60208310611a885780518252602082019150602081019050602083039250611a65565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090507f397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f18260001b811415611b365782600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c06565b7fe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd168060001b811415611c0557600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0d80346846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611bec57600080fd5b505af1158015611c00573d6000803e3d6000fd5b505050505b5b505b50505050565b611c3b7f0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f60001b33613917565b611cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e6720706175736572000000000000000000000000000000000000000081525060200191505060405180910390fd5b611cb5613cc9565b565b6000611ce67f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b33613917565b611d58576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c7920757365206f776e657220746f2063616c6c0000000000000000000081525060200191505060405180910390fd5b611d6182613dbc565b7f468b360fa155a4c5fdf0cb38ce238407e41508a56023e7536088c21b2cd64139826040518082815260200191505060405180910390a160019050919050565b6000600560009054906101000a900460ff16905090565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611e0b7f0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f60001b33613917565b611e7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e6720706175736572000000000000000000000000000000000000000081525060200191505060405180910390fd5b611e85613df5565b565b3373ffffffffffffffffffffffffffffffffffffffff167f219295438b17c92dbc62ee9b1874dc1a25cf55368e13d34d65325217d4acbafe348484604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611f0c578082015181840152602081019050611ef1565b50505050905090810190601f168015611f395780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611f72578082015181840152602081019050611f57565b50505050905090810190601f168015611f9f5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a25050565b6000611fe27f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b33613917565b612054576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c7920757365206f776e657220746f2063616c6c0000000000000000000081525060200191505060405180910390fd5b600061205f84613ee9565b90507fe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd168060001b81141580156120b757507f397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f18260001b8114155b612129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f77726f6e6720636c61737300000000000000000000000000000000000000000081525060200191505060405180910390fd5b6121338184613917565b6121a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6e6f20737563682061646472657373206578697374000000000000000000000081525060200191505060405180910390fd5b7f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b811415612250576003546121dc82613fe4565b1161224f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f696e7375666669656e636520616464726573736573000000000000000000000081525060200191505060405180910390fd5b5b6000848460405160200180807f64726f7041646472657373000000000000000000000000000000000000000000815250600b0183805190602001908083835b602083106122b2578051825260208201915060208101905060208303925061228f565b6001836020036101000a0380198251168184511680821785525050505050509050018273ffffffffffffffffffffffffffffffffffffffff1660601b8152601401925050506040516020818303038152906040528051906020012090506123198133614007565b60035461232582613fe4565b1061245957612334828561418f565b7fb02ddf2800cd4468f7eb14268a7c9f1b6e816aa425ed542d13d8d3a96fa445668585866040518080602001806020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381038352600b8152602001807f64726f7041646472657373000000000000000000000000000000000000000000815250602001838103825286818151815260200191508051906020019080838360005b838110156124085780820151818401526020810190506123ed565b50505050905090810190601f1680156124355780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a161244e81613dbc565b600192505050612460565b6000925050505b92915050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b07ed3a96040518163ffffffff1660e01b815260040160206040518083038186803b1580156124fa57600080fd5b505afa15801561250e573d6000803e3d6000fd5b505050506040513d602081101561252457600080fd5b8101908080519060200190929190505050905090565b6060600061254783613ee9565b90506125528161436f565b915050919050565b60006125897f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b33613917565b6125fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c7920757365206f776e657220746f2063616c6c0000000000000000000081525060200191505060405180910390fd5b600061260684613ee9565b90507fe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd168060001b811415801561265e57507f397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f18260001b8114155b6126d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f77726f6e6720636c61737300000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000848460405160200180807f6164644164647265737300000000000000000000000000000000000000000000815250600a0183805190602001908083835b60208310612732578051825260208201915060208101905060208303925061270f565b6001836020036101000a0380198251168184511680821785525050505050509050018273ffffffffffffffffffffffffffffffffffffffff1660601b8152601401925050506040516020818303038152906040528051906020012090506127998133614007565b6003546127a582613fe4565b106128d9576127b48285614007565b7fb02ddf2800cd4468f7eb14268a7c9f1b6e816aa425ed542d13d8d3a96fa445668585866040518080602001806020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381038352600a8152602001807f6164644164647265737300000000000000000000000000000000000000000000815250602001838103825286818151815260200191508051906020019080838360005b8381101561288857808201518184015260208101905061286d565b50505050905090810190601f1680156128b55780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a16128ce81613dbc565b6001925050506128e0565b6000925050505b92915050565b60006129157f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62260001b33613917565b612987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f77726f6e67206f70657261746f7200000000000000000000000000000000000081525060200191505060405180910390fd5b600560009054906101000a900460ff1615612a0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b8360008111612a81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f76616c7565206e656564203e203000000000000000000000000000000000000081525060200191505060405180910390fd5b84471015612af7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f636f6e747261637420686173206e6f7420656e6f756768206e6174697665000081525060200191505060405180910390fd5b858585604051602001808473ffffffffffffffffffffffffffffffffffffffff1660601b815260140183815260200182805190602001908083835b60208310612b555780518252602082019150602081019050602083039250612b32565b6001836020036101000a0380198251168184511680821785525050505050509050019350505050604051602081830303815290604052805190602001208314612c06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f7461736b486173682069732077726f6e6700000000000000000000000000000081525060200191505060405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae0fd47f600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663478538026040518163ffffffff1660e01b815260040160206040518083038186803b158015612cae57600080fd5b505afa158015612cc2573d6000803e3d6000fd5b505050506040513d6020811015612cd857600080fd5b810190808051906020019092919050505086336004546040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050602060405180830381600087803b158015612d4f57600080fd5b505af1158015612d63573d6000803e3d6000fd5b505050506040513d6020811015612d7957600080fd5b81019080805190602001909291905050509050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663afd464f26040518163ffffffff1660e01b815260040160206040518083038186803b158015612df457600080fd5b505afa158015612e08573d6000803e3d6000fd5b505050506040513d6020811015612e1e57600080fd5b8101908080519060200190929190505050811415612ef6578673ffffffffffffffffffffffffffffffffffffffff167f85c53e7e269cd44a12210170eb2636cdc0d111b93e101a211305e0144733995587876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612eb6578082015181840152602081019050612e9b565b50505050905090810190601f168015612ee35780820380516001836020036101000a031916815260200191505b50935050505060405180910390a261315f565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310224a986040518163ffffffff1660e01b815260040160206040518083038186803b158015612f5e57600080fd5b505afa158015612f72573d6000803e3d6000fd5b505050506040513d6020811015612f8857600080fd5b810190808051906020019092919050505081141561315e578673ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015612fe6573d6000803e3d6000fd5b508673ffffffffffffffffffffffffffffffffffffffff167f85c53e7e269cd44a12210170eb2636cdc0d111b93e101a211305e0144733995587876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561306757808201518184015260208101905061304c565b50505050905090810190601f1680156130945780820380516001836020036101000a031916815260200191505b50935050505060405180910390a28673ffffffffffffffffffffffffffffffffffffffff167fd8ff38332185c42ca14ded5671b8eb2842095abf024f6900cb42760ccb438f3387876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613122578082015181840152602081019050613107565b50505050905090810190601f16801561314f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a25b5b600192505050949350505050565b6000849050600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415613256578073ffffffffffffffffffffffffffffffffffffffff16631e9a695033866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561323957600080fd5b505af115801561324d573d6000803e3d6000fd5b505050506133ae565b8073ffffffffffffffffffffffffffffffffffffffff16639dc29fac33866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156132c757600080fd5b505af19250505080156132d8575060015b6133ac578073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561336b57600080fd5b505af115801561337f573d6000803e3d6000fd5b505050506040513d602081101561339557600080fd5b8101908080519060200190929190505050506133ad565b5b5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1679238c2675abb2a284618f6bc542d8166db8644922f0131860861bd16373a4868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561344a57808201518184015260208101905061342f565b50505050905090810190601f1680156134775780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156134b0578082015181840152602081019050613495565b50505050905090810190601f1680156134dd5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a35050505050565b6000600354905090565b600061352d7f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b33613917565b61359f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c7920757365206f776e657220746f2063616c6c0000000000000000000081525060200191505060405180910390fd5b60006135aa84613ee9565b90507f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62260001b8114806135ff57507f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b81145b613671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f77726f6e6720636c61737300000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000848460405160200180807f726573657452657175697265644e756d0000000000000000000000000000000081525060100183805190602001908083835b602083106136d357805182526020820191506020810190506020830392506136b0565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040528051906020012090506137218133614007565b60035461372d82613fe4565b1061390b5761373b81613dbc565b60007f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b83141561377957600354905084600381905550613824565b7f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62260001b8314156137b557600454905084600481905550613823565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f77726f6e6720636c61737300000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b7fce49fc04234925e87b95750e0e50cac6d4ffcf8a696e3316b3e13bedc84ee7a8868287604051808060200180602001858152602001848152602001838103835260108152602001807f726573657452657175697265644e756d00000000000000000000000000000000815250602001838103825286818151815260200191508051906020019080838360005b838110156138cc5780820151818401526020810190506138b1565b50505050905090810190601f1680156138f95780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505b60019250505092915050565b600080600090505b60016000858152602001908152602001600020600201805490508110156139d6578273ffffffffffffffffffffffffffffffffffffffff1660016000868152602001908152602001600020600201828154811061397857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156139c95760019150506139dc565b808060010191505061391f565b50600090505b92915050565b6000613a117f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b33613917565b613a83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c7920757365206f776e657220746f2063616c6c0000000000000000000081525060200191505060405180910390fd5b6000613a8e85613ee9565b9050600085858560405160200180807f6d6f646966794164647265737300000000000000000000000000000000000000815250600d0184805190602001908083835b60208310613af35780518252602082019150602081019050602083039250613ad0565b6001836020036101000a0380198251168184511680821785525050505050509050018373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019350505050604051602081830303815290604052805190602001209050613b7a8133614007565b600354613b8682613fe4565b10613cbb57613b96828686614413565b7fb02ddf2800cd4468f7eb14268a7c9f1b6e816aa425ed542d13d8d3a96fa445668686866040518080602001806020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381038352600d8152602001807f6d6f646966794164647265737300000000000000000000000000000000000000815250602001838103825286818151815260200191508051906020019080838360005b83811015613c6a578082015181840152602081019050613c4f565b50505050905090810190601f168015613c975780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1613cb081613dbc565b600192505050613cc2565b6000925050505b9392505050565b600560009054906101000a900460ff16613d4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000600560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613d8f61453a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600160008281526020019081526020016000206000808201600090556001820160009055600282016000613df09190614598565b505050565b600560009054906101000a900460ff1615613e78576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613ebc61453a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600080826040516020018082805190602001908083835b60208310613f235780518252602082019150602081019050602083039250613f00565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050613f6981614542565b613fdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c696420636c6173730000000000000000000000000000000000000081525060200191505060405180910390fd5b80915050919050565b600060016000838152602001908152602001600020600201805490509050919050565b6140118282613917565b15614084576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f647570206164647265737320616464656400000000000000000000000000000081525060200191505060405180910390fd5b600054600160008481526020019081526020016000206002018054905010614114576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f746f6f206d616e7920616464726573736573000000000000000000000000000081525060200191505060405180910390fd5b60016000838152602001908152602001600020600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60005b6001600084815260200190815260200160002060020180549050811015614369578173ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060020182815481106141eb57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561435c5760016000848152602001908152602001600020600201600180600086815260200190815260200160002060020180549050038154811061426e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060020182815481106142ba57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600084815260200190815260200160002060020180548061432157fe5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555061436b565b8080600101915050614192565b505b5050565b60606001600083815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561440757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116143bd575b50505050509050919050565b60005b6001600085815260200190815260200160002060020180549050811015614533578273ffffffffffffffffffffffffffffffffffffffff1660016000868152602001908152602001600020600201828154811061446f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561452657816001600086815260200190815260200160002060020182815481106144d857fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050614535565b8080600101915050614416565b505b505050565b600033905090565b600080600090505b60028054905081101561458d57826002828154811061456557fe5b90600052602060002001541415614580576001915050614593565b808060010191505061454a565b50600090505b919050565b50805460008255906000526020600020908101906145b691906145b9565b50565b5b808211156145d25760008160009055506001016145ba565b509056fea2646970667358221220e2f318245b3d44ef54d7b7255387f341c7f7b56928371624554cd07acbf15f3364736f6c63430007010033",
  "deployedBytecode": "0x6080604052600436106100e45760003560e01c806302c1927c146100e957806306fdde031461021b5780631d75807c146102ab5780632c2df742146102d65780633f4ba83a146103de578063521cb590146103f55780635c975abb14610446578063686699bb146104735780638456cb59146104b45780638609d28c146104cb57806391c40bf71461061d578063abd108ba1461071b578063b07ed3a91461075c578063c8e369bf1461079d578063ceb35b0f146108ba578063d5b99d3c146109b8578063dd9b86c114610aca578063e6a81ec414610c53578063e9e211bd14610c7e575b600080fd5b3480156100f557600080fd5b50610203600480360360a081101561010c57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803590602001909291908035906020019064010000000081111561017357600080fd5b82018360208201111561018557600080fd5b803590602001918460018302840111640100000000831117156101a757600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190929190505050610d66565b60405180821515815260200191505060405180910390f35b34801561022757600080fd5b506102306118d2565b6040518080602001828103825283818151815260200191508051906020019080838360005b83811015610270578082015181840152602081019050610255565b50505050905090810190601f16801561029d5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156102b757600080fd5b506102c061190b565b6040518082815260200191505060405180910390f35b3480156102e257600080fd5b506103dc600480360360608110156102f957600080fd5b810190808035906020019064010000000081111561031657600080fd5b82018360208201111561032857600080fd5b8035906020019184600183028401116401000000008311171561034a57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611915565b005b3480156103ea57600080fd5b506103f3611c0e565b005b34801561040157600080fd5b5061042e6004803603602081101561041857600080fd5b8101908080359060200190929190505050611cb7565b60405180821515815260200191505060405180910390f35b34801561045257600080fd5b5061045b611da1565b60405180821515815260200191505060405180910390f35b34801561047f57600080fd5b50610488611db8565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156104c057600080fd5b506104c9611dde565b005b61061b600480360360408110156104e157600080fd5b81019080803590602001906401000000008111156104fe57600080fd5b82018360208201111561051057600080fd5b8035906020019184600183028401116401000000008311171561053257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f8201169050808301925050505050505091929192908035906020019064010000000081111561059557600080fd5b8201836020820111156105a757600080fd5b803590602001918460018302840111640100000000831117156105c957600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290505050611e87565b005b34801561062957600080fd5b506107036004803603604081101561064057600080fd5b810190808035906020019064010000000081111561065d57600080fd5b82018360208201111561066f57600080fd5b8035906020019184600183028401116401000000008311171561069157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050611fb3565b60405180821515815260200191505060405180910390f35b34801561072757600080fd5b50610730612466565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b34801561076857600080fd5b50610771612490565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b3480156107a957600080fd5b50610863600480360360208110156107c057600080fd5b81019080803590602001906401000000008111156107dd57600080fd5b8201836020820111156107ef57600080fd5b8035906020019184600183028401116401000000008311171561081157600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061253a565b6040518080602001828103825283818151815260200191508051906020019060200280838360005b838110156108a657808201518184015260208101905061088b565b505050509050019250505060405180910390f35b3480156108c657600080fd5b506109a0600480360360408110156108dd57600080fd5b81019080803590602001906401000000008111156108fa57600080fd5b82018360208201111561090c57600080fd5b8035906020019184600183028401116401000000008311171561092e57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061255a565b60405180821515815260200191505060405180910390f35b3480156109c457600080fd5b50610ab2600480360360808110156109db57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610a2257600080fd5b820183602082011115610a3457600080fd5b80359060200191846001830284011164010000000083111715610a5657600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506128e6565b60405180821515815260200191505060405180910390f35b348015610ad657600080fd5b50610c5160048036036080811015610aed57600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919080359060200190640100000000811115610b3457600080fd5b820183602082011115610b4657600080fd5b80359060200191846001830284011164010000000083111715610b6857600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929080359060200190640100000000811115610bcb57600080fd5b820183602082011115610bdd57600080fd5b80359060200191846001830284011164010000000083111715610bff57600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f82011690508083019250505050505050919291929050505061316d565b005b348015610c5f57600080fd5b50610c686134f4565b6040518082815260200191505060405180910390f35b348015610c8a57600080fd5b50610d4e60048036036040811015610ca157600080fd5b8101908080359060200190640100000000811115610cbe57600080fd5b820183602082011115610cd057600080fd5b80359060200191846001830284011164010000000083111715610cf257600080fd5b91908080601f016020809104026020016040519081016040528093929190818152602001838380828437600081840152601f19601f820116905080830192505050505050509192919290803590602001909291905050506134fe565b60405180821515815260200191505060405180910390f35b6000610d957f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62260001b33613917565b610e07576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f77726f6e67206f70657261746f7200000000000000000000000000000000000081525060200191505060405180910390fd5b600560009054906101000a900460ff1615610e8a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b8360008111610f01576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f76616c7565206e656564203e203000000000000000000000000000000000000081525060200191505060405180910390fd5b6000879050858173ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060206040518083038186803b158015610f6e57600080fd5b505afa158015610f82573d6000803e3d6000fd5b505050506040513d6020811015610f9857600080fd5b8101908080519060200190929190505050101561101d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601d8152602001807f636f6e747261637420686173206e6f7420656e6f75676820657263323000000081525060200191505060405180910390fd5b87878787604051602001808573ffffffffffffffffffffffffffffffffffffffff1660601b81526014018473ffffffffffffffffffffffffffffffffffffffff1660601b815260140183815260200182805190602001908083835b6020831061109b5780518252602082019150602081019050602083039250611078565b6001836020036101000a03801982511681845116808217855250505050505090500194505050505060405160208183030381529060405280519060200120841461114d576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f7461736b486173682069732077726f6e6700000000000000000000000000000081525060200191505060405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae0fd47f600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663478538026040518163ffffffff1660e01b815260040160206040518083038186803b1580156111f557600080fd5b505afa158015611209573d6000803e3d6000fd5b505050506040513d602081101561121f57600080fd5b810190808051906020019092919050505087336004546040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050602060405180830381600087803b15801561129657600080fd5b505af11580156112aa573d6000803e3d6000fd5b505050506040513d60208110156112c057600080fd5b81019080805190602001909291905050509050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663afd464f26040518163ffffffff1660e01b815260040160206040518083038186803b15801561133b57600080fd5b505afa15801561134f573d6000803e3d6000fd5b505050506040513d602081101561136557600080fd5b8101908080519060200190929190505050811415611454578873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f91b4005f248ece53c5402f0c547c6a472d18676fbb0e2e15029d4869140cbe2089896040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156114145780820151818401526020810190506113f9565b50505050905090810190601f1680156114415780820380516001836020036101000a031916815260200191505b50935050505060405180910390a36118c2565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310224a986040518163ffffffff1660e01b815260040160206040518083038186803b1580156114bc57600080fd5b505afa1580156114d0573d6000803e3d6000fd5b505050506040513d60208110156114e657600080fd5b81019080805190602001909291905050508114156118c157600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168973ffffffffffffffffffffffffffffffffffffffff1614156115e2578173ffffffffffffffffffffffffffffffffffffffff1663867904b489896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156115c557600080fd5b505af11580156115d9573d6000803e3d6000fd5b5050505061171c565b8173ffffffffffffffffffffffffffffffffffffffff166340c10f1989896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561165357600080fd5b505af1925050508015611664575060015b61171a578173ffffffffffffffffffffffffffffffffffffffff1663a9059cbb89896040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050602060405180830381600087803b1580156116d957600080fd5b505af11580156116ed573d6000803e3d6000fd5b505050506040513d602081101561170357600080fd5b81019080805190602001909291905050505061171b565b5b5b8873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f91b4005f248ece53c5402f0c547c6a472d18676fbb0e2e15029d4869140cbe2089896040518083815260200180602001828103825283818151815260200191508051906020019080838360005b838110156117b3578082015181840152602081019050611798565b50505050905090810190601f1680156117e05780820380516001836020036101000a031916815260200191505b50935050505060405180910390a38873ffffffffffffffffffffffffffffffffffffffff168873ffffffffffffffffffffffffffffffffffffffff167f044513e921a12ac6560730ac3063f7946fdcb715deb39bc6f84c38be8083648a89896040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561188557808201518184015260208101905061186a565b50505050905090810190601f1680156118b25780820380516001836020036101000a031916815260200191505b50935050505060405180910390a35b5b6001935050505095945050505050565b6040518060400160405280600681526020017f427269646765000000000000000000000000000000000000000000000000000081525081565b6000600454905090565b600560009054906101000a900460ff16611997576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff161415611a3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f77726f6e6720616464726573730000000000000000000000000000000000000081525060200191505060405180910390fd5b6000611a478484846139e2565b90508015611c08576000846040516020018082805190602001908083835b60208310611a885780518252602082019150602081019050602083039250611a65565b6001836020036101000a0380198251168184511680821785525050505050509050019150506040516020818303038152906040528051906020012090507f397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f18260001b811415611b365782600660006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550611c06565b7fe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd168060001b811415611c0557600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b0d80346846040518263ffffffff1660e01b8152600401808273ffffffffffffffffffffffffffffffffffffffff168152602001915050600060405180830381600087803b158015611bec57600080fd5b505af1158015611c00573d6000803e3d6000fd5b505050505b5b505b50505050565b611c3b7f0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f60001b33613917565b611cad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e6720706175736572000000000000000000000000000000000000000081525060200191505060405180910390fd5b611cb5613cc9565b565b6000611ce67f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b33613917565b611d58576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c7920757365206f776e657220746f2063616c6c0000000000000000000081525060200191505060405180910390fd5b611d6182613dbc565b7f468b360fa155a4c5fdf0cb38ce238407e41508a56023e7536088c21b2cd64139826040518082815260200191505060405180910390a160019050919050565b6000600560009054906101000a900460ff16905090565b600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b611e0b7f0cc58340b26c619cd4edc70f833d3f4d9d26f3ae7d5ef2965f81fe5495049a4f60001b33613917565b611e7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e6720706175736572000000000000000000000000000000000000000081525060200191505060405180910390fd5b611e85613df5565b565b3373ffffffffffffffffffffffffffffffffffffffff167f219295438b17c92dbc62ee9b1874dc1a25cf55368e13d34d65325217d4acbafe348484604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b83811015611f0c578082015181840152602081019050611ef1565b50505050905090810190601f168015611f395780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b83811015611f72578082015181840152602081019050611f57565b50505050905090810190601f168015611f9f5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a25050565b6000611fe27f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b33613917565b612054576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c7920757365206f776e657220746f2063616c6c0000000000000000000081525060200191505060405180910390fd5b600061205f84613ee9565b90507fe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd168060001b81141580156120b757507f397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f18260001b8114155b612129576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f77726f6e6720636c61737300000000000000000000000000000000000000000081525060200191505060405180910390fd5b6121338184613917565b6121a5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f6e6f20737563682061646472657373206578697374000000000000000000000081525060200191505060405180910390fd5b7f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b811415612250576003546121dc82613fe4565b1161224f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260158152602001807f696e7375666669656e636520616464726573736573000000000000000000000081525060200191505060405180910390fd5b5b6000848460405160200180807f64726f7041646472657373000000000000000000000000000000000000000000815250600b0183805190602001908083835b602083106122b2578051825260208201915060208101905060208303925061228f565b6001836020036101000a0380198251168184511680821785525050505050509050018273ffffffffffffffffffffffffffffffffffffffff1660601b8152601401925050506040516020818303038152906040528051906020012090506123198133614007565b60035461232582613fe4565b1061245957612334828561418f565b7fb02ddf2800cd4468f7eb14268a7c9f1b6e816aa425ed542d13d8d3a96fa445668585866040518080602001806020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381038352600b8152602001807f64726f7041646472657373000000000000000000000000000000000000000000815250602001838103825286818151815260200191508051906020019080838360005b838110156124085780820151818401526020810190506123ed565b50505050905090810190601f1680156124355780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a161244e81613dbc565b600192505050612460565b6000925050505b92915050565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b07ed3a96040518163ffffffff1660e01b815260040160206040518083038186803b1580156124fa57600080fd5b505afa15801561250e573d6000803e3d6000fd5b505050506040513d602081101561252457600080fd5b8101908080519060200190929190505050905090565b6060600061254783613ee9565b90506125528161436f565b915050919050565b60006125897f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b33613917565b6125fb576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c7920757365206f776e657220746f2063616c6c0000000000000000000081525060200191505060405180910390fd5b600061260684613ee9565b90507fe41d88711b08bdcd7556c5d2d24e0da6fa1f614cf2055f4d7e10206017cd168060001b811415801561265e57507f397bc5b97f629151e68146caedba62f10b47e426b38db589771a288c0861f18260001b8114155b6126d0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f77726f6e6720636c61737300000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000848460405160200180807f6164644164647265737300000000000000000000000000000000000000000000815250600a0183805190602001908083835b60208310612732578051825260208201915060208101905060208303925061270f565b6001836020036101000a0380198251168184511680821785525050505050509050018273ffffffffffffffffffffffffffffffffffffffff1660601b8152601401925050506040516020818303038152906040528051906020012090506127998133614007565b6003546127a582613fe4565b106128d9576127b48285614007565b7fb02ddf2800cd4468f7eb14268a7c9f1b6e816aa425ed542d13d8d3a96fa445668585866040518080602001806020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381038352600a8152602001807f6164644164647265737300000000000000000000000000000000000000000000815250602001838103825286818151815260200191508051906020019080838360005b8381101561288857808201518184015260208101905061286d565b50505050905090810190601f1680156128b55780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a16128ce81613dbc565b6001925050506128e0565b6000925050505b92915050565b60006129157f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62260001b33613917565b612987576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f77726f6e67206f70657261746f7200000000000000000000000000000000000081525060200191505060405180910390fd5b600560009054906101000a900460ff1615612a0a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b8360008111612a81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600e8152602001807f76616c7565206e656564203e203000000000000000000000000000000000000081525060200191505060405180910390fd5b84471015612af7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f636f6e747261637420686173206e6f7420656e6f756768206e6174697665000081525060200191505060405180910390fd5b858585604051602001808473ffffffffffffffffffffffffffffffffffffffff1660601b815260140183815260200182805190602001908083835b60208310612b555780518252602082019150602081019050602083039250612b32565b6001836020036101000a0380198251168184511680821785525050505050509050019350505050604051602081830303815290604052805190602001208314612c06576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f7461736b486173682069732077726f6e6700000000000000000000000000000081525060200191505060405180910390fd5b6000600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ae0fd47f600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663478538026040518163ffffffff1660e01b815260040160206040518083038186803b158015612cae57600080fd5b505afa158015612cc2573d6000803e3d6000fd5b505050506040513d6020811015612cd857600080fd5b810190808051906020019092919050505086336004546040518563ffffffff1660e01b8152600401808581526020018481526020018373ffffffffffffffffffffffffffffffffffffffff168152602001828152602001945050505050602060405180830381600087803b158015612d4f57600080fd5b505af1158015612d63573d6000803e3d6000fd5b505050506040513d6020811015612d7957600080fd5b81019080805190602001909291905050509050600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663afd464f26040518163ffffffff1660e01b815260040160206040518083038186803b158015612df457600080fd5b505afa158015612e08573d6000803e3d6000fd5b505050506040513d6020811015612e1e57600080fd5b8101908080519060200190929190505050811415612ef6578673ffffffffffffffffffffffffffffffffffffffff167f85c53e7e269cd44a12210170eb2636cdc0d111b93e101a211305e0144733995587876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015612eb6578082015181840152602081019050612e9b565b50505050905090810190601f168015612ee35780820380516001836020036101000a031916815260200191505b50935050505060405180910390a261315f565b600660009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166310224a986040518163ffffffff1660e01b815260040160206040518083038186803b158015612f5e57600080fd5b505afa158015612f72573d6000803e3d6000fd5b505050506040513d6020811015612f8857600080fd5b810190808051906020019092919050505081141561315e578673ffffffffffffffffffffffffffffffffffffffff166108fc879081150290604051600060405180830381858888f19350505050158015612fe6573d6000803e3d6000fd5b508673ffffffffffffffffffffffffffffffffffffffff167f85c53e7e269cd44a12210170eb2636cdc0d111b93e101a211305e0144733995587876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b8381101561306757808201518184015260208101905061304c565b50505050905090810190601f1680156130945780820380516001836020036101000a031916815260200191505b50935050505060405180910390a28673ffffffffffffffffffffffffffffffffffffffff167fd8ff38332185c42ca14ded5671b8eb2842095abf024f6900cb42760ccb438f3387876040518083815260200180602001828103825283818151815260200191508051906020019080838360005b83811015613122578082015181840152602081019050613107565b50505050905090810190601f16801561314f5780820380516001836020036101000a031916815260200191505b50935050505060405180910390a25b5b600192505050949350505050565b6000849050600560019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff161415613256578073ffffffffffffffffffffffffffffffffffffffff16631e9a695033866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b15801561323957600080fd5b505af115801561324d573d6000803e3d6000fd5b505050506133ae565b8073ffffffffffffffffffffffffffffffffffffffff16639dc29fac33866040518363ffffffff1660e01b8152600401808373ffffffffffffffffffffffffffffffffffffffff16815260200182815260200192505050600060405180830381600087803b1580156132c757600080fd5b505af19250505080156132d8575060015b6133ac578073ffffffffffffffffffffffffffffffffffffffff166323b872dd3330876040518463ffffffff1660e01b8152600401808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018281526020019350505050602060405180830381600087803b15801561336b57600080fd5b505af115801561337f573d6000803e3d6000fd5b505050506040513d602081101561339557600080fd5b8101908080519060200190929190505050506133ad565b5b5b8473ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f1679238c2675abb2a284618f6bc542d8166db8644922f0131860861bd16373a4868686604051808481526020018060200180602001838103835285818151815260200191508051906020019080838360005b8381101561344a57808201518184015260208101905061342f565b50505050905090810190601f1680156134775780820380516001836020036101000a031916815260200191505b50838103825284818151815260200191508051906020019080838360005b838110156134b0578082015181840152602081019050613495565b50505050905090810190601f1680156134dd5780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a35050505050565b6000600354905090565b600061352d7f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b33613917565b61359f576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c7920757365206f776e657220746f2063616c6c0000000000000000000081525060200191505060405180910390fd5b60006135aa84613ee9565b90507f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62260001b8114806135ff57507f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b81145b613671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f77726f6e6720636c61737300000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000848460405160200180807f726573657452657175697265644e756d0000000000000000000000000000000081525060100183805190602001908083835b602083106136d357805182526020820191506020810190506020830392506136b0565b6001836020036101000a038019825116818451168082178552505050505050905001828152602001925050506040516020818303038152906040528051906020012090506137218133614007565b60035461372d82613fe4565b1061390b5761373b81613dbc565b60007f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b83141561377957600354905084600381905550613824565b7f46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f62260001b8314156137b557600454905084600481905550613823565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600b8152602001807f77726f6e6720636c61737300000000000000000000000000000000000000000081525060200191505060405180910390fd5b5b7fce49fc04234925e87b95750e0e50cac6d4ffcf8a696e3316b3e13bedc84ee7a8868287604051808060200180602001858152602001848152602001838103835260108152602001807f726573657452657175697265644e756d00000000000000000000000000000000815250602001838103825286818151815260200191508051906020019080838360005b838110156138cc5780820151818401526020810190506138b1565b50505050905090810190601f1680156138f95780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1505b60019250505092915050565b600080600090505b60016000858152602001908152602001600020600201805490508110156139d6578273ffffffffffffffffffffffffffffffffffffffff1660016000868152602001908152602001600020600201828154811061397857fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156139c95760019150506139dc565b808060010191505061391f565b50600090505b92915050565b6000613a117f02016836a56b71f0d02689e69e326f4f4c1b9057164ef592671cf0d37c8040c060001b33613917565b613a83576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260168152602001807f6f6e6c7920757365206f776e657220746f2063616c6c0000000000000000000081525060200191505060405180910390fd5b6000613a8e85613ee9565b9050600085858560405160200180807f6d6f646966794164647265737300000000000000000000000000000000000000815250600d0184805190602001908083835b60208310613af35780518252602082019150602081019050602083039250613ad0565b6001836020036101000a0380198251168184511680821785525050505050509050018373ffffffffffffffffffffffffffffffffffffffff1660601b81526014018273ffffffffffffffffffffffffffffffffffffffff1660601b81526014019350505050604051602081830303815290604052805190602001209050613b7a8133614007565b600354613b8682613fe4565b10613cbb57613b96828686614413565b7fb02ddf2800cd4468f7eb14268a7c9f1b6e816aa425ed542d13d8d3a96fa445668686866040518080602001806020018573ffffffffffffffffffffffffffffffffffffffff1681526020018473ffffffffffffffffffffffffffffffffffffffff1681526020018381038352600d8152602001807f6d6f646966794164647265737300000000000000000000000000000000000000815250602001838103825286818151815260200191508051906020019080838360005b83811015613c6a578082015181840152602081019050613c4f565b50505050905090810190601f168015613c975780820380516001836020036101000a031916815260200191505b509550505050505060405180910390a1613cb081613dbc565b600192505050613cc2565b6000925050505b9392505050565b600560009054906101000a900460ff16613d4b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260148152602001807f5061757361626c653a206e6f742070617573656400000000000000000000000081525060200191505060405180910390fd5b6000600560006101000a81548160ff0219169083151502179055507f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa613d8f61453a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600160008281526020019081526020016000206000808201600090556001820160009055600282016000613df09190614598565b505050565b600560009054906101000a900460ff1615613e78576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260108152602001807f5061757361626c653a207061757365640000000000000000000000000000000081525060200191505060405180910390fd5b6001600560006101000a81548160ff0219169083151502179055507f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258613ebc61453a565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390a1565b600080826040516020018082805190602001908083835b60208310613f235780518252602082019150602081019050602083039250613f00565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051602081830303815290604052805190602001209050613f6981614542565b613fdb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600d8152602001807f696e76616c696420636c6173730000000000000000000000000000000000000081525060200191505060405180910390fd5b80915050919050565b600060016000838152602001908152602001600020600201805490509050919050565b6140118282613917565b15614084576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f647570206164647265737320616464656400000000000000000000000000000081525060200191505060405180910390fd5b600054600160008481526020019081526020016000206002018054905010614114576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f746f6f206d616e7920616464726573736573000000000000000000000000000081525060200191505060405180910390fd5b60016000838152602001908152602001600020600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b60005b6001600084815260200190815260200160002060020180549050811015614369578173ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060020182815481106141eb57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561435c5760016000848152602001908152602001600020600201600180600086815260200190815260200160002060020180549050038154811061426e57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166001600085815260200190815260200160002060020182815481106142ba57fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506001600084815260200190815260200160002060020180548061432157fe5b6001900381819060005260206000200160006101000a81549073ffffffffffffffffffffffffffffffffffffffff021916905590555061436b565b8080600101915050614192565b505b5050565b60606001600083815260200190815260200160002060020180548060200260200160405190810160405280929190818152602001828054801561440757602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190600101908083116143bd575b50505050509050919050565b60005b6001600085815260200190815260200160002060020180549050811015614533578273ffffffffffffffffffffffffffffffffffffffff1660016000868152602001908152602001600020600201828154811061446f57fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141561452657816001600086815260200190815260200160002060020182815481106144d857fe5b9060005260206000200160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050614535565b8080600101915050614416565b505b505050565b600033905090565b600080600090505b60028054905081101561458d57826002828154811061456557fe5b90600052602060002001541415614580576001915050614593565b808060010191505061454a565b50600090505b919050565b50805460008255906000526020600020908101906145b691906145b9565b50565b5b808211156145d25760008160009055506001016145ba565b509056fea2646970667358221220e2f318245b3d44ef54d7b7255387f341c7f7b56928371624554cd07acbf15f3364736f6c63430007010033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1941,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "MaxItemAdressNum",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1945,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "container",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Item)1938_storage)"
      },
      {
        "astId": 974,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "classHashArray",
        "offset": 0,
        "slot": "2",
        "type": "t_array(t_bytes32)dyn_storage"
      },
      {
        "astId": 976,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "ownerRequireNum",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 978,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "operatorRequireNum",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 314,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "_paused",
        "offset": 0,
        "slot": "5",
        "type": "t_bool"
      },
      {
        "astId": 406,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "husd",
        "offset": 1,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 408,
        "contract": "contracts/Bridge.sol:Bridge",
        "label": "logic",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(BridgeLogic)1819"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(BridgeLogic)1819": {
        "encoding": "inplace",
        "label": "contract BridgeLogic",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_struct(Item)1938_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Container.Item)",
        "numberOfBytes": "32",
        "value": "t_struct(Item)1938_storage"
      },
      "t_struct(Item)1938_storage": {
        "encoding": "inplace",
        "label": "struct Container.Item",
        "members": [
          {
            "astId": 1932,
            "contract": "contracts/Bridge.sol:Bridge",
            "label": "itemType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1934,
            "contract": "contracts/Bridge.sol:Bridge",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1937,
            "contract": "contracts/Bridge.sol:Bridge",
            "label": "addresses",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}