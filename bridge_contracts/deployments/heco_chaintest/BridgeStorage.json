{
  "address": "0xED56996B22984649C298d40Efe48e082f004CaAB",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aCaller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "oneAddress",
          "type": "address"
        }
      ],
      "name": "addSupporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        }
      ],
      "name": "getTaskInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        }
      ],
      "name": "removeAllSupporter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "taskType",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "status",
          "type": "uint256"
        }
      ],
      "name": "setTaskInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "supporterExists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x52bbfdbd56eab1608fe82ac95c12c6680b30c2b01c5af3bed58c28c156e44f04",
  "receipt": {
    "to": null,
    "from": "0xB26cdfEC309d01C2Cc526B14D4C2A0Ecab402702",
    "contractAddress": "0xED56996B22984649C298d40Efe48e082f004CaAB",
    "transactionIndex": 0,
    "gasUsed": "576066",
    "logsBloom": "0x
    "blockHash": "0x3a5c6ed305d62f1f8089655f03241f69735e74ad31b4f4a41a5ce806cd1c8bb9",
    "transactionHash": "0x52bbfdbd56eab1608fe82ac95c12c6680b30c2b01c5af3bed58c28c156e44f04",
    "logs": [],
    "blockNumber": 1295695,
    "cumulativeGasUsed": "576066",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x484CEb1518B4449f54Cf45c8d465Ea927F8E66ac"
  ],
  "solcInputHash": "858b88442f475aab560f604ffd41c600",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aCaller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"}],\"name\":\"addSupporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"getTaskInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"removeAllSupporter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"taskType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"status\",\"type\":\"uint256\"}],\"name\":\"setTaskInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"supporterExists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeStorage.sol\":\"BridgeStorage\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":0},\"remappings\":[]},\"sources\":{\"contracts/BridgeStorage.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"./Container.sol\\\";\\n\\ncontract BridgeStorage is Container {\\n    string public constant name = \\\"BridgeStorage\\\";\\n\\n    address private caller;\\n\\n    constructor(address aCaller) {\\n        caller = aCaller;\\n    }\\n\\n    modifier onlyCaller() {\\n        require(msg.sender == caller, \\\"only use main contract to call\\\");\\n        _;\\n    }\\n\\n    function supporterExists(bytes32 taskHash, address user) public view returns(bool) {\\n        return itemAddressExists(taskHash, user);\\n    }\\n\\n    function setTaskInfo(bytes32 taskHash, uint256 taskType, uint256 status) external onlyCaller {\\n        setItemInfo(taskHash, taskType, status);\\n    }\\n\\n    function getTaskInfo(bytes32 taskHash) public view returns(uint256, uint256, uint256){\\n        return getItemInfo(taskHash);\\n    }\\n\\n    function addSupporter(bytes32 taskHash, address oneAddress) external onlyCaller{\\n        addItemAddress(taskHash, oneAddress);\\n    }\\n\\n    function removeAllSupporter(bytes32 taskHash) external onlyCaller {\\n        removeItemAddresses(taskHash);\\n    }\\n}\\n\",\"keccak256\":\"0xbe38dde4ad977bd0f521beb658f93ebcd225d924450f5c9f0e6a63b232fb4d87\"},\"contracts/Container.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\ncontract Container {\\n\\n    struct Item{\\n        uint256 itemType;\\n        uint256 status;\\n        address[] addresses;\\n    }\\n\\n    uint256 MaxItemAdressNum = 255;\\n    mapping (bytes32 => Item) private container;\\n    // bool private _nativePaused = false;\\n\\n\\n    function itemAddressExists(bytes32 _id, address _oneAddress) internal view returns(bool){\\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\\n            if(container[_id].addresses[i] == _oneAddress)\\n                return true;\\n        }\\n        return false;\\n    }\\n    function getItemAddresses(bytes32 _id) internal view returns(address[] memory){\\n        return container[_id].addresses;\\n    }\\n\\n    function getItemInfo(bytes32 _id) internal view returns(uint256, uint256, uint256){\\n        return (container[_id].itemType, container[_id].status, container[_id].addresses.length);\\n    }\\n\\n    function getItemAddressCount(bytes32 _id) internal view returns(uint256){\\n        return container[_id].addresses.length;\\n    }\\n\\n    function setItemInfo(bytes32 _id, uint256 _itemType, uint256 _status) internal{\\n        container[_id].itemType = _itemType;\\n        container[_id].status = _status;\\n    }\\n\\n    function addItemAddress(bytes32 _id, address _oneAddress) internal{\\n        require(!itemAddressExists(_id, _oneAddress), \\\"dup address added\\\");\\n        require(container[_id].addresses.length < MaxItemAdressNum, \\\"too many addresses\\\");\\n        container[_id].addresses.push(_oneAddress);\\n    }\\n    function removeItemAddresses(bytes32 _id) internal {\\n        delete container[_id].addresses;\\n    }\\n\\n    function removeOneItemAddress(bytes32 _id, address _oneAddress) internal {\\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\\n            if(container[_id].addresses[i] == _oneAddress){\\n                container[_id].addresses[i] = container[_id].addresses[container[_id].addresses.length - 1];\\n                container[_id].addresses.pop();\\n                return;\\n            }\\n        }\\n    }\\n\\n    function removeItem(bytes32 _id) internal{\\n        delete container[_id];\\n    }\\n\\n    function replaceItemAddress(bytes32 _id, address _oneAddress, address _anotherAddress) internal {\\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\\n            if(container[_id].addresses[i] == _oneAddress){\\n                container[_id].addresses[i] = _anotherAddress;\\n                return;\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x80a0be619d8ec377df6b7ced88b0537c767acf3acc8bde0538ec77703d22299e\"}},\"version\":1}",
  "bytecode": "0x608060405260ff60005534801561001557600080fd5b506040516109523803806109528339818101604052602081101561003857600080fd5b810190808051906020019092919050505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550506108b88061009a6000396000f3fe608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde03146100675780634ad52e02146100ea5780635761b3471461013a5780639dce71081461017c578063ce71e548146101aa578063db6b14de1461020e575b600080fd5b61006f61025c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100af578082015181840152602081019050610094565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101166004803603602081101561010057600080fd5b8101908080359060200190929190505050610295565b60405180848152602001838152602001828152602001935050505060405180910390f35b61017a6004803603606081101561015057600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506102b0565b005b6101a86004803603602081101561019257600080fd5b8101908080359060200190929190505050610383565b005b6101f6600480360360408110156101c057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610452565b60405180821515815260200191505060405180910390f35b61025a6004803603604081101561022457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610466565b005b6040518060400160405280600d81526020017f42726964676553746f726167650000000000000000000000000000000000000081525081565b60008060006102a384610537565b9250925092509193909250565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6f6e6c7920757365206d61696e20636f6e747261637420746f2063616c6c000081525060200191505060405180910390fd5b61037e838383610591565b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6f6e6c7920757365206d61696e20636f6e747261637420746f2063616c6c000081525060200191505060405180910390fd5b61044f816105cc565b50565b600061045e83836105f1565b905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6f6e6c7920757365206d61696e20636f6e747261637420746f2063616c6c000081525060200191505060405180910390fd5b61053382826106bc565b5050565b60008060006001600085815260200190815260200160002060000154600160008681526020019081526020016000206001015460016000878152602001908152602001600020600201805490509250925092509193909250565b816001600085815260200190815260200160002060000181905550806001600085815260200190815260200160002060010181905550505050565b6001600082815260200190815260200160002060020160006105ee9190610844565b50565b600080600090505b60016000858152602001908152602001600020600201805490508110156106b0578273ffffffffffffffffffffffffffffffffffffffff1660016000868152602001908152602001600020600201828154811061065257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106a35760019150506106b6565b80806001019150506105f9565b50600090505b92915050565b6106c682826105f1565b15610739576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f647570206164647265737320616464656400000000000000000000000000000081525060200191505060405180910390fd5b6000546001600084815260200190815260200160002060020180549050106107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f746f6f206d616e7920616464726573736573000000000000000000000000000081525060200191505060405180910390fd5b60016000838152602001908152602001600020600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b50805460008255906000526020600020908101906108629190610865565b50565b5b8082111561087e576000816000905550600101610866565b509056fea264697066735822122054cc69d82ac4706312d291c7fe7212a34befdd6465800fcc8299c11ca0e5569564736f6c63430007010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100625760003560e01c806306fdde03146100675780634ad52e02146100ea5780635761b3471461013a5780639dce71081461017c578063ce71e548146101aa578063db6b14de1461020e575b600080fd5b61006f61025c565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100af578082015181840152602081019050610094565b50505050905090810190601f1680156100dc5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b6101166004803603602081101561010057600080fd5b8101908080359060200190929190505050610295565b60405180848152602001838152602001828152602001935050505060405180910390f35b61017a6004803603606081101561015057600080fd5b810190808035906020019092919080359060200190929190803590602001909291905050506102b0565b005b6101a86004803603602081101561019257600080fd5b8101908080359060200190929190505050610383565b005b6101f6600480360360408110156101c057600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610452565b60405180821515815260200191505060405180910390f35b61025a6004803603604081101561022457600080fd5b8101908080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610466565b005b6040518060400160405280600d81526020017f42726964676553746f726167650000000000000000000000000000000000000081525081565b60008060006102a384610537565b9250925092509193909250565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610373576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6f6e6c7920757365206d61696e20636f6e747261637420746f2063616c6c000081525060200191505060405180910390fd5b61037e838383610591565b505050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610446576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6f6e6c7920757365206d61696e20636f6e747261637420746f2063616c6c000081525060200191505060405180910390fd5b61044f816105cc565b50565b600061045e83836105f1565b905092915050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610529576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601e8152602001807f6f6e6c7920757365206d61696e20636f6e747261637420746f2063616c6c000081525060200191505060405180910390fd5b61053382826106bc565b5050565b60008060006001600085815260200190815260200160002060000154600160008681526020019081526020016000206001015460016000878152602001908152602001600020600201805490509250925092509193909250565b816001600085815260200190815260200160002060000181905550806001600085815260200190815260200160002060010181905550505050565b6001600082815260200190815260200160002060020160006105ee9190610844565b50565b600080600090505b60016000858152602001908152602001600020600201805490508110156106b0578273ffffffffffffffffffffffffffffffffffffffff1660016000868152602001908152602001600020600201828154811061065257fe5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614156106a35760019150506106b6565b80806001019150506105f9565b50600090505b92915050565b6106c682826105f1565b15610739576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260118152602001807f647570206164647265737320616464656400000000000000000000000000000081525060200191505060405180910390fd5b6000546001600084815260200190815260200160002060020180549050106107c9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260128152602001807f746f6f206d616e7920616464726573736573000000000000000000000000000081525060200191505060405180910390fd5b60016000838152602001908152602001600020600201819080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050565b50805460008255906000526020600020908101906108629190610865565b50565b5b8082111561087e576000816000905550600101610866565b509056fea264697066735822122054cc69d82ac4706312d291c7fe7212a34befdd6465800fcc8299c11ca0e5569564736f6c63430007010033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1934,
        "contract": "contracts/BridgeStorage.sol:BridgeStorage",
        "label": "MaxItemAdressNum",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 1938,
        "contract": "contracts/BridgeStorage.sol:BridgeStorage",
        "label": "container",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_bytes32,t_struct(Item)1931_storage)"
      },
      {
        "astId": 1822,
        "contract": "contracts/BridgeStorage.sol:BridgeStorage",
        "label": "caller",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_struct(Item)1931_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct Container.Item)",
        "numberOfBytes": "32",
        "value": "t_struct(Item)1931_storage"
      },
      "t_struct(Item)1931_storage": {
        "encoding": "inplace",
        "label": "struct Container.Item",
        "members": [
          {
            "astId": 1925,
            "contract": "contracts/BridgeStorage.sol:BridgeStorage",
            "label": "itemType",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1927,
            "contract": "contracts/BridgeStorage.sol:BridgeStorage",
            "label": "status",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1930,
            "contract": "contracts/BridgeStorage.sol:BridgeStorage",
            "label": "addresses",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}