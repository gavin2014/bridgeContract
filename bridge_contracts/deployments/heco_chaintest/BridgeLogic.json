{
  "address": "0x484CEb1518B4449f54Cf45c8d465Ea927F8E66ac",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "aCaller",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "TASKCANCELLED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TASKDONE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TASKINIT",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TASKPROCESSING",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WITHDRAWTASK",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        }
      ],
      "name": "cancelTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStoreAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "storeAddress",
          "type": "address"
        }
      ],
      "name": "resetStoreLogic",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "taskType",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "taskHash",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "oneAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "requireNum",
          "type": "uint256"
        }
      ],
      "name": "supportTask",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xd8c645907e1ae00118c58e4951b0e9df2e8c5a573c1291d691cb7fd6b54f4388",
  "receipt": {
    "to": null,
    "from": "0xB26cdfEC309d01C2Cc526B14D4C2A0Ecab402702",
    "contractAddress": "0x484CEb1518B4449f54Cf45c8d465Ea927F8E66ac",
    "transactionIndex": 0,
    "gasUsed": "795970",
    "logsBloom": "0x
    "blockHash": "0x96b11d1455960296c4f6c163e70cb9ca1af9c52cb46c22f00ebbeb5f534b3173",
    "transactionHash": "0xd8c645907e1ae00118c58e4951b0e9df2e8c5a573c1291d691cb7fd6b54f4388",
    "logs": [],
    "blockNumber": 1295692,
    "cumulativeGasUsed": "795970",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x88C83c4362D4fFE594B7Eb6c9a4Be791947a84D7"
  ],
  "solcInputHash": "858b88442f475aab560f604ffd41c600",
  "metadata": "{\"compiler\":{\"version\":\"0.7.1+commit.f4a555be\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"aCaller\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"TASKCANCELLED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TASKDONE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TASKINIT\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TASKPROCESSING\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WITHDRAWTASK\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"}],\"name\":\"cancelTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStoreAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"storeAddress\",\"type\":\"address\"}],\"name\":\"resetStoreLogic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"taskType\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"taskHash\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"oneAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"requireNum\",\"type\":\"uint256\"}],\"name\":\"supportTask\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/BridgeLogic.sol\":\"BridgeLogic\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":0},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x3b21f2c8d626de3b9925ae33e972d8bf5c8b1bffb3f4ee94daeed7d0679036e6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\",\"license\":\"MIT\"},\"contracts/BridgeLogic.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./BridgeStorage.sol\\\";\\n\\ncontract BridgeLogic {\\n    using SafeMath for uint256;\\n\\n    string public constant name = \\\"BridgeLogic\\\";\\n\\n    bytes32 internal constant OPERATORHASH = 0x46a52cf33029de9f84853745a87af28464c80bf0346df1b32e205fc73319f622;\\n    uint256 public constant TASKINIT = 0;\\n    uint256 public constant TASKPROCESSING = 1;\\n    uint256 public constant TASKCANCELLED = 2;\\n    uint256 public constant TASKDONE = 3;\\n    uint256 public constant WITHDRAWTASK = 1;\\n\\n    address private caller;\\n    BridgeStorage private store;\\n\\n    constructor(address aCaller) {\\n        caller = aCaller;\\n    }\\n\\n    modifier onlyCaller(){\\n        require(msg.sender == caller, \\\"only main contract can call\\\");\\n        _;\\n    }\\n\\n    modifier operatorExists(address operator) {\\n        require(store.supporterExists(OPERATORHASH, operator), \\\"wrong operator\\\");\\n        _;\\n    }\\n\\n    function resetStoreLogic(address storeAddress) external onlyCaller {\\n        store = BridgeStorage(storeAddress);\\n    }\\n\\n    function getStoreAddress() public view returns(address) {\\n        return address(store);\\n    }\\n\\n\\n    function supportTask(uint256 taskType, bytes32 taskHash, address oneAddress, uint256 requireNum) external onlyCaller returns(uint256){\\n        require(!store.supporterExists(taskHash, oneAddress), \\\"supporter already exists\\\");\\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\\n        require(theTaskStatus < TASKDONE, \\\"wrong status\\\");\\n\\n        if (theTaskStatus != TASKINIT)\\n            require(theTaskType == taskType, \\\"task type not match\\\");\\n        store.addSupporter(taskHash, oneAddress);\\n        theSupporterNum++;\\n        if(theSupporterNum >= requireNum)\\n            theTaskStatus = TASKDONE;\\n        else\\n            theTaskStatus = TASKPROCESSING;\\n        store.setTaskInfo(taskHash, taskType, theTaskStatus);\\n        return theTaskStatus;\\n    }\\n\\n    function cancelTask(bytes32 taskHash)  external onlyCaller returns(uint256) {\\n        (uint256 theTaskType,uint256 theTaskStatus,uint256 theSupporterNum) = store.getTaskInfo(taskHash);\\n        require(theTaskStatus == TASKPROCESSING, \\\"wrong status\\\");\\n        if(theSupporterNum > 0) store.removeAllSupporter(taskHash);\\n        theTaskStatus = TASKCANCELLED;\\n        store.setTaskInfo(taskHash, theTaskType, theTaskStatus);\\n        return theTaskStatus;\\n    }\\n}\\n\",\"keccak256\":\"0x4791b106822348836b2bbb56e50b8c4fc0e78556b78ce2c9c820839be3dd4169\"},\"contracts/BridgeStorage.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\nimport \\\"./Container.sol\\\";\\n\\ncontract BridgeStorage is Container {\\n    string public constant name = \\\"BridgeStorage\\\";\\n\\n    address private caller;\\n\\n    constructor(address aCaller) {\\n        caller = aCaller;\\n    }\\n\\n    modifier onlyCaller() {\\n        require(msg.sender == caller, \\\"only use main contract to call\\\");\\n        _;\\n    }\\n\\n    function supporterExists(bytes32 taskHash, address user) public view returns(bool) {\\n        return itemAddressExists(taskHash, user);\\n    }\\n\\n    function setTaskInfo(bytes32 taskHash, uint256 taskType, uint256 status) external onlyCaller {\\n        setItemInfo(taskHash, taskType, status);\\n    }\\n\\n    function getTaskInfo(bytes32 taskHash) public view returns(uint256, uint256, uint256){\\n        return getItemInfo(taskHash);\\n    }\\n\\n    function addSupporter(bytes32 taskHash, address oneAddress) external onlyCaller{\\n        addItemAddress(taskHash, oneAddress);\\n    }\\n\\n    function removeAllSupporter(bytes32 taskHash) external onlyCaller {\\n        removeItemAddresses(taskHash);\\n    }\\n}\\n\",\"keccak256\":\"0xbe38dde4ad977bd0f521beb658f93ebcd225d924450f5c9f0e6a63b232fb4d87\"},\"contracts/Container.sol\":{\"content\":\"pragma solidity ^0.7.0;\\n\\ncontract Container {\\n\\n    struct Item{\\n        uint256 itemType;\\n        uint256 status;\\n        address[] addresses;\\n    }\\n\\n    uint256 MaxItemAdressNum = 255;\\n    mapping (bytes32 => Item) private container;\\n    // bool private _nativePaused = false;\\n\\n\\n    function itemAddressExists(bytes32 _id, address _oneAddress) internal view returns(bool){\\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\\n            if(container[_id].addresses[i] == _oneAddress)\\n                return true;\\n        }\\n        return false;\\n    }\\n    function getItemAddresses(bytes32 _id) internal view returns(address[] memory){\\n        return container[_id].addresses;\\n    }\\n\\n    function getItemInfo(bytes32 _id) internal view returns(uint256, uint256, uint256){\\n        return (container[_id].itemType, container[_id].status, container[_id].addresses.length);\\n    }\\n\\n    function getItemAddressCount(bytes32 _id) internal view returns(uint256){\\n        return container[_id].addresses.length;\\n    }\\n\\n    function setItemInfo(bytes32 _id, uint256 _itemType, uint256 _status) internal{\\n        container[_id].itemType = _itemType;\\n        container[_id].status = _status;\\n    }\\n\\n    function addItemAddress(bytes32 _id, address _oneAddress) internal{\\n        require(!itemAddressExists(_id, _oneAddress), \\\"dup address added\\\");\\n        require(container[_id].addresses.length < MaxItemAdressNum, \\\"too many addresses\\\");\\n        container[_id].addresses.push(_oneAddress);\\n    }\\n    function removeItemAddresses(bytes32 _id) internal {\\n        delete container[_id].addresses;\\n    }\\n\\n    function removeOneItemAddress(bytes32 _id, address _oneAddress) internal {\\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\\n            if(container[_id].addresses[i] == _oneAddress){\\n                container[_id].addresses[i] = container[_id].addresses[container[_id].addresses.length - 1];\\n                container[_id].addresses.pop();\\n                return;\\n            }\\n        }\\n    }\\n\\n    function removeItem(bytes32 _id) internal{\\n        delete container[_id];\\n    }\\n\\n    function replaceItemAddress(bytes32 _id, address _oneAddress, address _anotherAddress) internal {\\n        for(uint256 i = 0; i < container[_id].addresses.length; i++){\\n            if(container[_id].addresses[i] == _oneAddress){\\n                container[_id].addresses[i] = _anotherAddress;\\n                return;\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x80a0be619d8ec377df6b7ced88b0537c767acf3acc8bde0538ec77703d22299e\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610da8380380610da88339818101604052602081101561003357600080fd5b8101908080519060200190929190505050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610d14806100946000396000f3fe608060405234801561001057600080fd5b506004361061008e5760003560e01c806306fdde031461009357806310224a98146101165780634785380214610134578063ae0fd47f14610152578063afd464f2146101c8578063b07ed3a9146101e6578063b0d803461461021a578063ee8ca3b51461025e578063f54b8cd3146102a0578063f73ea036146102be575b600080fd5b61009b6102dc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100db5780820151818401526020810190506100c0565b50505050905090810190601f1680156101085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61011e610315565b6040518082815260200191505060405180910390f35b61013c61031a565b6040518082815260200191505060405180910390f35b6101b26004803603608081101561016857600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061031f565b6040518082815260200191505060405180910390f35b6101d0610856565b6040518082815260200191505060405180910390f35b6101ee61085b565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61025c6004803603602081101561023057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610885565b005b61028a6004803603602081101561027457600080fd5b810190808035906020019092919050505061098a565b6040518082815260200191505060405180910390f35b6102a8610cd4565b6040518082815260200191505060405180910390f35b6102c6610cd9565b6040518082815260200191505060405180910390f35b6040518060400160405280600b81526020017f4272696467654c6f67696300000000000000000000000000000000000000000081525081565b600381565b600181565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f6e6c79206d61696e20636f6e74726163742063616e2063616c6c000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce71e54885856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561047457600080fd5b505afa158015610488573d6000803e3d6000fd5b505050506040513d602081101561049e57600080fd5b810190808051906020019092919050505015610522576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f737570706f7274657220616c726561647920657869737473000000000000000081525060200191505060405180910390fd5b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad52e02886040518263ffffffff1660e01b81526004018082815260200191505060606040518083038186803b15801561059a57600080fd5b505afa1580156105ae573d6000803e3d6000fd5b505050506040513d60608110156105c457600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505092509250925060038210610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e6720737461747573000000000000000000000000000000000000000081525060200191505060405180910390fd5b600082146106e3578783146106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f7461736b2074797065206e6f74206d617463680000000000000000000000000081525060200191505060405180910390fd5b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db6b14de88886040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561077657600080fd5b505af115801561078a573d6000803e3d6000fd5b5050505080806001019150508481106107a657600391506107ab565b600191505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635761b347888a856040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561083057600080fd5b505af1158015610844573d6000803e3d6000fd5b50505050819350505050949350505050565b600181565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f6e6c79206d61696e20636f6e74726163742063616e2063616c6c000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f6e6c79206d61696e20636f6e74726163742063616e2063616c6c000000000081525060200191505060405180910390fd5b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad52e02866040518263ffffffff1660e01b81526004018082815260200191505060606040518083038186803b158015610ac657600080fd5b505afa158015610ada573d6000803e3d6000fd5b505050506040513d6060811015610af057600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505092509250925060018214610b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e6720737461747573000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000811115610c2857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dce7108866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610c0f57600080fd5b505af1158015610c23573d6000803e3d6000fd5b505050505b60029150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635761b3478685856040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b158015610cb157600080fd5b505af1158015610cc5573d6000803e3d6000fd5b50505050819350505050919050565b600081565b60028156fea26469706673582212207c01194e07269c288ab159794c073bba79f636fd44e26d7aa3099623c42ecb3064736f6c63430007010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061008e5760003560e01c806306fdde031461009357806310224a98146101165780634785380214610134578063ae0fd47f14610152578063afd464f2146101c8578063b07ed3a9146101e6578063b0d803461461021a578063ee8ca3b51461025e578063f54b8cd3146102a0578063f73ea036146102be575b600080fd5b61009b6102dc565b6040518080602001828103825283818151815260200191508051906020019080838360005b838110156100db5780820151818401526020810190506100c0565b50505050905090810190601f1680156101085780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b61011e610315565b6040518082815260200191505060405180910390f35b61013c61031a565b6040518082815260200191505060405180910390f35b6101b26004803603608081101561016857600080fd5b810190808035906020019092919080359060200190929190803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061031f565b6040518082815260200191505060405180910390f35b6101d0610856565b6040518082815260200191505060405180910390f35b6101ee61085b565b604051808273ffffffffffffffffffffffffffffffffffffffff16815260200191505060405180910390f35b61025c6004803603602081101561023057600080fd5b81019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190505050610885565b005b61028a6004803603602081101561027457600080fd5b810190808035906020019092919050505061098a565b6040518082815260200191505060405180910390f35b6102a8610cd4565b6040518082815260200191505060405180910390f35b6102c6610cd9565b6040518082815260200191505060405180910390f35b6040518060400160405280600b81526020017f4272696467654c6f67696300000000000000000000000000000000000000000081525081565b600381565b600181565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f6e6c79206d61696e20636f6e74726163742063616e2063616c6c000000000081525060200191505060405180910390fd5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663ce71e54885856040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff1681526020019250505060206040518083038186803b15801561047457600080fd5b505afa158015610488573d6000803e3d6000fd5b505050506040513d602081101561049e57600080fd5b810190808051906020019092919050505015610522576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f737570706f7274657220616c726561647920657869737473000000000000000081525060200191505060405180910390fd5b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad52e02886040518263ffffffff1660e01b81526004018082815260200191505060606040518083038186803b15801561059a57600080fd5b505afa1580156105ae573d6000803e3d6000fd5b505050506040513d60608110156105c457600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505092509250925060038210610665576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e6720737461747573000000000000000000000000000000000000000081525060200191505060405180910390fd5b600082146106e3578783146106e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260138152602001807f7461736b2074797065206e6f74206d617463680000000000000000000000000081525060200191505060405180910390fd5b5b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663db6b14de88886040518363ffffffff1660e01b8152600401808381526020018273ffffffffffffffffffffffffffffffffffffffff16815260200192505050600060405180830381600087803b15801561077657600080fd5b505af115801561078a573d6000803e3d6000fd5b5050505080806001019150508481106107a657600391506107ab565b600191505b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635761b347888a856040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b15801561083057600080fd5b505af1158015610844573d6000803e3d6000fd5b50505050819350505050949350505050565b600181565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610946576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f6e6c79206d61696e20636f6e74726163742063616e2063616c6c000000000081525060200191505060405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a4e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f6f6e6c79206d61696e20636f6e74726163742063616e2063616c6c000000000081525060200191505060405180910390fd5b6000806000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16634ad52e02866040518263ffffffff1660e01b81526004018082815260200191505060606040518083038186803b158015610ac657600080fd5b505afa158015610ada573d6000803e3d6000fd5b505050506040513d6060811015610af057600080fd5b8101908080519060200190929190805190602001909291908051906020019092919050505092509250925060018214610b91576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252600c8152602001807f77726f6e6720737461747573000000000000000000000000000000000000000081525060200191505060405180910390fd5b6000811115610c2857600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16639dce7108866040518263ffffffff1660e01b815260040180828152602001915050600060405180830381600087803b158015610c0f57600080fd5b505af1158015610c23573d6000803e3d6000fd5b505050505b60029150600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16635761b3478685856040518463ffffffff1660e01b8152600401808481526020018381526020018281526020019350505050600060405180830381600087803b158015610cb157600080fd5b505af1158015610cc5573d6000803e3d6000fd5b50505050819350505050919050565b600081565b60028156fea26469706673582212207c01194e07269c288ab159794c073bba79f636fd44e26d7aa3099623c42ecb3064736f6c63430007010033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1608,
        "contract": "contracts/BridgeLogic.sol:BridgeLogic",
        "label": "caller",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1610,
        "contract": "contracts/BridgeLogic.sol:BridgeLogic",
        "label": "store",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(BridgeStorage)1921"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(BridgeStorage)1921": {
        "encoding": "inplace",
        "label": "contract BridgeStorage",
        "numberOfBytes": "20"
      }
    }
  }
}